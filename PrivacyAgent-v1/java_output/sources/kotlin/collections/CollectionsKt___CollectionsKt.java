package kotlin.collections;

/* JADX INFO: Access modifiers changed from: package-private */
@kotlin.Metadata(d1 = {"\u0000Â\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u001c\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010 \n\u0002\b\u000f\n\u0002\u0010\u001e\n\u0002\u0018\u0002\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0010!\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000f\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0018\n\u0000\n\u0002\u0010\u0005\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\f\n\u0002\u0010\u0019\n\u0000\n\u0002\u0010\u0006\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\u0007\n\u0002\u0010\u0014\n\u0000\n\u0002\u0010\u0015\n\u0000\n\u0002\u0010\t\n\u0002\u0010\u0016\n\u0000\n\u0002\u0010\n\n\u0002\u0010\u0017\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0004\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\"\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010#\n\u0002\b\n\n\u0002\u0018\u0002\n\u0002\bB\n\u0002\u0010\u0011\n\u0002\b\u000e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\u0013\u001a-\u0010\u0005\u001a\u00020\u0004\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0004\b\u0005\u0010\u0006\u001a%\u0010\t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007¢\u0006\u0004\b\t\u0010\n\u001a9\u0010\r\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u00072\u0012\u0010\f\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00028\u00000\u000b¢\u0006\u0004\b\r\u0010\u000e\u001a'\u0010\u000f\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007¢\u0006\u0004\b\u000f\u0010\n\u001a\u001d\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u0010\u0010\u0011\u001a\u001d\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b\u0010\u0010\u0013\u001a7\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u0010\u0010\u0015\u001a\u001f\u0010\u0016\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u0016\u0010\u0011\u001a\u001f\u0010\u0016\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b\u0016\u0010\u0013\u001a9\u0010\u0016\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u0016\u0010\u0015\u001a'\u0010\u0017\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010\b\u001a\u00020\u0007¢\u0006\u0004\b\u0017\u0010\u0018\u001a*\u0010\u0019\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b\u0019\u0010\u001a\u001a*\u0010\u0019\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b\u0019\u0010\u001b\u001a0\u0010\u001c\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a0\u0010\u001c\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a0\u0010\u001d\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a0\u0010\u001d\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u001e\u0010\u0011\u001a\u001d\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b\u001e\u0010\u0013\u001a7\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u001e\u0010\u0015\u001a7\u0010\u001e\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u001e\u0010\u001f\u001a*\u0010 \u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b \u0010\u001a\u001a*\u0010 \u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b \u0010\u001b\u001a\u001f\u0010!\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b!\u0010\u0011\u001a\u001f\u0010!\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b!\u0010\u0013\u001a9\u0010!\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b!\u0010\u0015\u001a9\u0010!\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b!\u0010\u001f\u001a'\u0010$\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\u0006\u0010$\u001a\u00020#H\u0007¢\u0006\u0004\b$\u0010%\u001a)\u0010&\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\u0006\u0010$\u001a\u00020#H\u0007¢\u0006\u0004\b&\u0010%\u001a\u001d\u0010'\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b'\u0010\u0011\u001a\u001d\u0010'\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b'\u0010\u0013\u001a7\u0010'\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b'\u0010\u0015\u001a\u001f\u0010(\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b(\u0010\u0011\u001a\u001f\u0010(\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0012¢\u0006\u0004\b(\u0010\u0013\u001a9\u0010(\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b(\u0010\u0015\u001a$\u0010*\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010)\u001a\u00020\u0007\u001a$\u0010+\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010)\u001a\u00020\u0007\u001a6\u0010,\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a6\u0010-\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a6\u0010.\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001aK\u00102\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010\u0014\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040/H\u0086\bø\u0001\u0000\u001af\u00106\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000003*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00012'\u0010\u0014\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040/H\u0086\bø\u0001\u0000¢\u0006\u0004\b6\u00107\u001a$\u0010:\u001a\r\u0012\t\u0012\u00078\u0000¢\u0006\u0002\b90\u0012\"\u0006\b\u0000\u00108\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0002H\u0086\b\u001a:\u0010;\u001a\u00028\u0001\"\u0006\b\u0000\u00108\u0018\u0001\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000003*\u0006\u0012\u0002\b\u00030\u00022\u0006\u00105\u001a\u00028\u0001H\u0086\b¢\u0006\u0004\b;\u0010<\u001a6\u0010=\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\"\u0010?\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\b\b\u0000\u0010\u0001*\u00020>*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u001a=\u0010@\u001a\u00028\u0000\"\u0010\b\u0000\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103\"\b\b\u0001\u0010\u0001*\u00020>*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00022\u0006\u00105\u001a\u00028\u0000¢\u0006\u0004\b@\u0010<\u001aQ\u0010A\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000003*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00012\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bA\u0010B\u001aQ\u0010C\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000003*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00012\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bC\u0010B\u001a$\u0010F\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010E\u001a\u00020D\u001a*\u0010F\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\f\u0010E\u001a\b\u0012\u0004\u0012\u00020\u00070\u0002\u001a$\u0010G\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010)\u001a\u00020\u0007\u001a$\u0010H\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0006\u0010)\u001a\u00020\u0007\u001a6\u0010I\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a6\u0010J\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u001c\u0010K\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a \u0010N\u001a\u00020M\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000L2\u0006\u0010$\u001a\u00020#H\u0007\u001aD\u0010Q\u001a\u00020M\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000L2\u0016\b\u0004\u0010P\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001aD\u0010R\u001a\u00020M\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000L2\u0016\b\u0004\u0010P\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001a \u0010S\u001a\u00020M\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000L\u001a&\u0010T\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001aJ\u0010U\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010P\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001aJ\u0010V\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010P\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001a&\u0010W\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a8\u0010[\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010Z\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Xj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`Y\u001a\u0010\u0010]\u001a\u00020\\*\b\u0012\u0004\u0012\u00020\u00040\"\u001a\u0010\u0010`\u001a\u00020_*\b\u0012\u0004\u0012\u00020^0\"\u001a\u0010\u0010c\u001a\u00020b*\b\u0012\u0004\u0012\u00020a0\"\u001a\u0010\u0010f\u001a\u00020e*\b\u0012\u0004\u0012\u00020d0\"\u001a\u0010\u0010i\u001a\u00020h*\b\u0012\u0004\u0012\u00020g0\"\u001a\u0010\u0010k\u001a\u00020j*\b\u0012\u0004\u0012\u00020\u00070\"\u001a\u0010\u0010n\u001a\u00020m*\b\u0012\u0004\u0012\u00020l0\"\u001a\u0010\u0010q\u001a\u00020p*\b\u0012\u0004\u0012\u00020o0\"\u001aT\u0010w\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020v\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001e\u0010u\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020t0\u000bH\u0086\bø\u0001\u0000\u001aB\u0010y\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000v\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001a\\\u0010y\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020v\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010z\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000\u001a_\u0010}\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0018\b\u0002\u0010|*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b}\u0010~\u001ay\u0010}\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s\"\u0018\b\u0003\u0010|*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00032\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010z\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b}\u0010\u007f\u001as\u0010\u0080\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s\"\u0018\b\u0003\u0010|*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00032\u001e\u0010u\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020t0\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u0080\u0001\u0010~\u001aD\u0010\u0082\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010v\"\u0004\b\u0000\u0010r\"\u0004\b\u0001\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0013\u0010\u0081\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000\u001ab\u0010\u0083\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010r\"\u0004\b\u0001\u0010s\"\u0018\b\u0002\u0010|*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0013\u0010\u0081\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u0083\u0001\u0010~\u001a9\u0010\u0084\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000003*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u0001¢\u0006\u0005\b\u0084\u0001\u0010<\u001a)\u0010\u0087\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u00000\u0085\u0001j\t\u0012\u0004\u0012\u00028\u0000`\u0086\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001d\u0010\u0088\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001d\u0010\u0089\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000L\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001d\u0010\u0089\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000L\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"\u001a\u001e\u0010\u008b\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008a\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001aC\u0010\u008c\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0018\u0010u\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000bH\u0086\bø\u0001\u0000\u001aM\u0010\u008c\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0019\u0010u\u001a\u0015\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u008d\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0006\b\u008e\u0001\u0010\u008f\u0001\u001a_\u0010\u0090\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0018\u0010u\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u0090\u0001\u0010B\u001a`\u0010\u0090\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0019\u0010u\u001a\u0015\u0012\u0004\u0012\u00028\u0000\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00010\u008d\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u0091\u0001\u0010B\u001aI\u0010\u0092\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00120v\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001ac\u0010\u0092\u0001\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020\u00120v\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010z\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000\u001ae\u0010\u0093\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u001c\b\u0002\u0010|*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000L0{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u0093\u0001\u0010~\u001a\u007f\u0010\u0093\u0001\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r\"\u0004\b\u0002\u0010s\"\u001c\b\u0003\u0010|*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020L0{*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00032\u0012\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010z\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u0093\u0001\u0010\u007f\u001aF\u0010\u0095\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0094\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\b\u0004\u0010x\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000\u001a=\u0010\u0096\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010u\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001aR\u0010\u0097\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010u\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010/H\u0086\bø\u0001\u0000\u001aX\u0010\u0098\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00108*\u00020>*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010u\u001a%\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010/H\u0086\bø\u0001\u0000\u001at\u0010\u0099\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00108*\u00020>\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022)\u0010u\u001a%\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010/H\u0086\bø\u0001\u0000¢\u0006\u0005\b\u0099\u0001\u00107\u001an\u0010\u009a\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022'\u0010u\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010/H\u0086\bø\u0001\u0000¢\u0006\u0005\b\u009a\u0001\u00107\u001aC\u0010\u009b\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00108*\u00020>*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010u\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001a_\u0010\u009c\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u00108*\u00020>\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0014\u0010u\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u009c\u0001\u0010B\u001aY\u0010\u009d\u0001\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0010\b\u0002\u00104*\n\u0012\u0006\b\u0000\u0012\u00028\u000103*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u00105\u001a\u00028\u00022\u0012\u0010u\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0005\b\u009d\u0001\u0010B\u001a$\u0010\u009f\u0001\u001a\u000f\u0012\u000b\u0012\t\u0012\u0004\u0012\u00028\u00000\u009e\u00010\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001d\u0010 \u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a=\u0010¡\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010r*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001a0\u0010£\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008a\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0004\u001a0\u0010¤\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008a\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0004\u001a\u001e\u0010¦\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000¥\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a0\u0010§\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008a\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0004\u001a1\u0010¨\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u0017\u0010©\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a1\u0010©\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u0017\u0010ª\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a1\u0010ª\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a`\u0010®\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010/H\u0086\bø\u0001\u0000¢\u0006\u0006\b®\u0001\u0010¯\u0001\u001av\u0010±\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010°\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\b±\u0001\u0010²\u0001\u001a`\u0010³\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0007\u0010«\u0001\u001a\u00028\u00012)\u0010\u00ad\u0001\u001a$\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00010/H\u0086\bø\u0001\u0000¢\u0006\u0006\b³\u0001\u0010´\u0001\u001av\u0010µ\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00122\u0007\u0010«\u0001\u001a\u00028\u00012?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00010°\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\bµ\u0001\u0010¶\u0001\u001a2\u0010¸\u0001\u001a\u00020M\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0013\u0010·\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020M0\u000bH\u0087\bø\u0001\u0000\u001aG\u0010¹\u0001\u001a\u00020M\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022(\u0010·\u0001\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020M0/H\u0086\bø\u0001\u0000\u001a\u001c\u0010¼\u0001\u001a\u00020d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\bº\u0001\u0010»\u0001\u001a\u001c\u0010¼\u0001\u001a\u00020g*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\bº\u0001\u0010½\u0001\u001a,\u0010¼\u0001\u001a\u00028\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\bº\u0001\u0010¾\u0001\u001aI\u0010À\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b¿\u0001\u0010\u0015\u001aK\u0010Á\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\bÁ\u0001\u0010\u0015\u001a\u001e\u0010Â\u0001\u001a\u0004\u0018\u00010d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\bÂ\u0001\u0010Ã\u0001\u001a\u001e\u0010Â\u0001\u001a\u0004\u0018\u00010g*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\bÂ\u0001\u0010Ä\u0001\u001a.\u0010Â\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\bÂ\u0001\u0010¾\u0001\u001a>\u0010Ç\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010Z\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Xj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`YH\u0007¢\u0006\u0006\bÅ\u0001\u0010Æ\u0001\u001a@\u0010È\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010Z\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Xj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`YH\u0007¢\u0006\u0006\bÈ\u0001\u0010Æ\u0001\u001a\u001c\u0010Ê\u0001\u001a\u00020d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\bÉ\u0001\u0010»\u0001\u001a\u001c\u0010Ê\u0001\u001a\u00020g*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\bÉ\u0001\u0010½\u0001\u001a,\u0010Ê\u0001\u001a\u00028\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\bÉ\u0001\u0010¾\u0001\u001aI\u0010Ì\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\bË\u0001\u0010\u0015\u001aK\u0010Í\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00010O*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\bÍ\u0001\u0010\u0015\u001a\u001e\u0010Î\u0001\u001a\u0004\u0018\u00010d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\bÎ\u0001\u0010Ã\u0001\u001a\u001e\u0010Î\u0001\u001a\u0004\u0018\u00010g*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\bÎ\u0001\u0010Ä\u0001\u001a.\u0010Î\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000O*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\bÎ\u0001\u0010¾\u0001\u001a>\u0010Ð\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010Z\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Xj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`YH\u0007¢\u0006\u0006\bÏ\u0001\u0010Æ\u0001\u001a@\u0010Ñ\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010Z\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000Xj\n\u0012\u0006\b\u0000\u0012\u00028\u0000`YH\u0007¢\u0006\u0006\bÑ\u0001\u0010Æ\u0001\u001a\u0017\u0010Ò\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a1\u0010Ò\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001aE\u0010Ó\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00104*\b\u0012\u0004\u0012\u00028\u00000\u0002*\u00028\u00012\u0013\u0010·\u0001\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020M0\u000bH\u0087\bø\u0001\u0000¢\u0006\u0006\bÓ\u0001\u0010Ô\u0001\u001aZ\u0010Õ\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u00104*\b\u0012\u0004\u0012\u00028\u00000\u0002*\u00028\u00012(\u0010·\u0001\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020M0/H\u0087\bø\u0001\u0000¢\u0006\u0006\bÕ\u0001\u0010Ö\u0001\u001a\\\u0010Ø\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000/H\u0086\bø\u0001\u0000¢\u0006\u0006\bØ\u0001\u0010Ù\u0001\u001ar\u0010Ú\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000°\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\bÚ\u0001\u0010Û\u0001\u001at\u0010Ü\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000°\u0001H\u0087\bø\u0001\u0000¢\u0006\u0006\bÜ\u0001\u0010Û\u0001\u001a^\u0010Ý\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000/H\u0087\bø\u0001\u0000¢\u0006\u0006\bÝ\u0001\u0010Ù\u0001\u001a\\\u0010Þ\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00122)\u0010\u00ad\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00000/H\u0086\bø\u0001\u0000¢\u0006\u0006\bÞ\u0001\u0010ß\u0001\u001ar\u0010à\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00122?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00000°\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\bà\u0001\u0010á\u0001\u001at\u0010â\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00122?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00000°\u0001H\u0087\bø\u0001\u0000¢\u0006\u0006\bâ\u0001\u0010á\u0001\u001a^\u0010ã\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00122)\u0010\u00ad\u0001\u001a$\u0012\u0004\u0012\u00028\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u00000/H\u0087\bø\u0001\u0000¢\u0006\u0006\bã\u0001\u0010ß\u0001\u001af\u0010ä\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010/H\u0087\bø\u0001\u0000¢\u0006\u0006\bä\u0001\u0010å\u0001\u001a|\u0010æ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010°\u0001H\u0087\bø\u0001\u0000¢\u0006\u0006\bæ\u0001\u0010ç\u0001\u001aY\u0010è\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000/H\u0087\bø\u0001\u0000\u001ao\u0010é\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0005\b\u0000\u0010×\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000°\u0001H\u0087\bø\u0001\u0000\u001af\u0010ê\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012)\u0010\u00ad\u0001\u001a$\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010/H\u0087\bø\u0001\u0000¢\u0006\u0006\bê\u0001\u0010å\u0001\u001a|\u0010ë\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010«\u0001\u001a\u00028\u00012?\u0010\u00ad\u0001\u001a:\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b0\u0012\b\b1\u0012\u0004\b\b(\b\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(¬\u0001\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010°\u0001H\u0087\bø\u0001\u0000¢\u0006\u0006\bë\u0001\u0010ç\u0001\u001a1\u0010ì\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00070\u000bH\u0087\bø\u0001\u0000\u001a1\u0010í\u0001\u001a\u00020d\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010P\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020d0\u000bH\u0087\bø\u0001\u0000\u001a#\u0010î\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\b\b\u0000\u0010\u0001*\u00020>*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u001a#\u0010î\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\b\b\u0000\u0010\u0001*\u00020>*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0012\u001a.\u0010ð\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00120\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010ï\u0001\u001a\u00020\u0007H\u0007\u001aH\u0010ð\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010ï\u0001\u001a\u00020\u00072\u0018\u0010u\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0012\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u001a1\u0010ñ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\bñ\u0001\u0010ò\u0001\u001a;\u0010ñ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010ô\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000ó\u0001H\u0086\u0002¢\u0006\u0006\bñ\u0001\u0010õ\u0001\u001a/\u0010ñ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010ô\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u001a0\u0010ñ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u000e\u0010ô\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008d\u0001H\u0086\u0002\u001aI\u0010ö\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0012\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00120t\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0014\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a1\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b÷\u0001\u0010ò\u0001\u001a1\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b÷\u0001\u0010ø\u0001\u001a;\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010ô\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000ó\u0001H\u0086\u0002¢\u0006\u0006\b÷\u0001\u0010õ\u0001\u001a;\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\u0010\u0010ô\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000ó\u0001H\u0086\u0002¢\u0006\u0006\b÷\u0001\u0010ù\u0001\u001a/\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010ô\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u001a/\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\r\u0010ô\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u001a0\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u000e\u0010ô\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008d\u0001H\u0086\u0002\u001a0\u0010÷\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\"2\u000e\u0010ô\u0001\u001a\t\u0012\u0004\u0012\u00028\u00000\u008d\u0001H\u0086\u0002\u001aD\u0010ü\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u00120\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010ï\u0001\u001a\u00020\u00072\t\b\u0002\u0010ú\u0001\u001a\u00020\u00072\t\b\u0002\u0010û\u0001\u001a\u00020\u0004H\u0007\u001a^\u0010ü\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010ï\u0001\u001a\u00020\u00072\t\b\u0002\u0010ú\u0001\u001a\u00020\u00072\t\b\u0002\u0010û\u0001\u001a\u00020\u00042\u0018\u0010u\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000\u0012\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u001aM\u0010ý\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010t0\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010¢\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010ó\u0001H\u0086\u0004¢\u0006\u0006\bý\u0001\u0010õ\u0001\u001a\u0084\u0001\u0010ý\u0001\u001a\b\u0012\u0004\u0012\u00028\u00020\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0004\b\u0002\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010¢\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00010ó\u000128\u0010u\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(þ\u0001\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(ÿ\u0001\u0012\u0004\u0012\u00028\u00020/H\u0086\bø\u0001\u0000¢\u0006\u0006\bý\u0001\u0010\u0080\u0002\u001aA\u0010ý\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010t0\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\u0004\u001ax\u0010ý\u0001\u001a\b\u0012\u0004\u0012\u00028\u00020\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108\"\u0004\b\u0002\u0010s*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¢\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u000228\u0010u\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(þ\u0001\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(ÿ\u0001\u0012\u0004\u0012\u00028\u00020/H\u0086\bø\u0001\u0000\u001a+\u0010\u0081\u0002\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000t0\u0012\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007\u001ac\u0010\u0081\u0002\u001a\b\u0012\u0004\u0012\u00028\u00010\u0012\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u00108*\b\u0012\u0004\u0012\u00028\u00000\u000228\u0010u\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(þ\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b0\u0012\t\b1\u0012\u0005\b\b(ÿ\u0001\u0012\u0004\u0012\u00028\u00010/H\u0087\bø\u0001\u0000\u001a\u008e\u0001\u0010\u008c\u0002\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u000f\b\u0001\u0010\u0084\u0002*\b0\u0082\u0002j\u0003`\u0083\u0002*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010\u0085\u0002\u001a\u00028\u00012\n\b\u0002\u0010\u0087\u0002\u001a\u00030\u0086\u00022\n\b\u0002\u0010\u0088\u0002\u001a\u00030\u0086\u00022\n\b\u0002\u0010\u0089\u0002\u001a\u00030\u0086\u00022\t\b\u0002\u0010\u008a\u0002\u001a\u00020\u00072\n\b\u0002\u0010\u008b\u0002\u001a\u00030\u0086\u00022\u0017\b\u0002\u0010u\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u0002\u0018\u00010\u000b¢\u0006\u0006\b\u008c\u0002\u0010\u008d\u0002\u001al\u0010\u008f\u0002\u001a\u00030\u008e\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\n\b\u0002\u0010\u0087\u0002\u001a\u00030\u0086\u00022\n\b\u0002\u0010\u0088\u0002\u001a\u00030\u0086\u00022\n\b\u0002\u0010\u0089\u0002\u001a\u00030\u0086\u00022\t\b\u0002\u0010\u008a\u0002\u001a\u00020\u00072\n\b\u0002\u0010\u008b\u0002\u001a\u00030\u0086\u00022\u0017\b\u0002\u0010u\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u0002\u0018\u00010\u000b\u001a\u001e\u0010\u0090\u0002\u001a\t\u0012\u0004\u0012\u00028\u00000\u008d\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020^0\u0002H\u0007¢\u0006\u0006\b\u0091\u0002\u0010»\u0001\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020o0\u0002H\u0007¢\u0006\u0006\b\u0093\u0002\u0010»\u0001\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007¢\u0006\u0006\b\u0094\u0002\u0010»\u0001\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020l0\u0002H\u0007¢\u0006\u0006\b\u0095\u0002\u0010»\u0001\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\b\u0096\u0002\u0010»\u0001\u001a\u001c\u0010\u0092\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\b\u0097\u0002\u0010»\u0001\u001a\u001c\u0010\u009a\u0002\u001a\u00020\u0007*\b\u0012\u0004\u0012\u00020^0\u0002H\u0007¢\u0006\u0006\b\u0098\u0002\u0010\u0099\u0002\u001a\u001c\u0010\u009a\u0002\u001a\u00020\u0007*\b\u0012\u0004\u0012\u00020o0\u0002H\u0007¢\u0006\u0006\b\u009b\u0002\u0010\u0099\u0002\u001a\u001c\u0010\u009a\u0002\u001a\u00020\u0007*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007¢\u0006\u0006\b\u009c\u0002\u0010\u0099\u0002\u001a\u001c\u0010\u009a\u0002\u001a\u00020l*\b\u0012\u0004\u0012\u00020l0\u0002H\u0007¢\u0006\u0006\b\u009d\u0002\u0010\u009e\u0002\u001a\u001c\u0010\u009a\u0002\u001a\u00020g*\b\u0012\u0004\u0012\u00020g0\u0002H\u0007¢\u0006\u0006\b\u009f\u0002\u0010½\u0001\u001a\u001c\u0010\u009a\u0002\u001a\u00020d*\b\u0012\u0004\u0012\u00020d0\u0002H\u0007¢\u0006\u0006\b \u0002\u0010»\u0001\u0082\u0002\u0007\n\u0005\b\u009920\u0001¨\u0006¡\u0002"}, d2 = {"Lkotlin/internal/OnlyInputTypes;", androidx.exifinterface.media.ExifInterface.GPS_DIRECTION_TRUE, "", "element", "", "contains", "(Ljava/lang/Iterable;Ljava/lang/Object;)Z", "", "index", "elementAt", "(Ljava/lang/Iterable;I)Ljava/lang/Object;", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "(Ljava/lang/Iterable;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "first", "(Ljava/lang/Iterable;)Ljava/lang/Object;", "", "(Ljava/util/List;)Ljava/lang/Object;", "predicate", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "firstOrNull", "getOrNull", "(Ljava/util/List;I)Ljava/lang/Object;", "indexOf", "(Ljava/lang/Iterable;Ljava/lang/Object;)I", "(Ljava/util/List;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "last", "(Ljava/util/List;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "lastIndexOf", "lastOrNull", "", "Lkotlin/random/Random;", "random", "(Ljava/util/Collection;Lkotlin/random/Random;)Ljava/lang/Object;", "randomOrNull", "single", "singleOrNull", com.baidu.mobads.sdk.api.IAdInterListener.AdReqParam.AD_COUNT, "drop", "dropLast", "dropLastWhile", "dropWhile", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "", "C", "destination", "filterIndexedTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "filterIsInstanceTo", "(Ljava/lang/Iterable;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Ljava/lang/Iterable;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "Lkotlin/ranges/IntRange;", "indices", "slice", "take", "takeLast", "takeLastWhile", "takeWhile", "reversed", "", "", "shuffle", "", "selector", "sortBy", "sortByDescending", "sortDescending", "sorted", "sortedBy", "sortedByDescending", "sortedDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedWith", "", "toBooleanArray", "", "", "toByteArray", "", "", "toCharArray", "", "", "toDoubleArray", "", "", "toFloatArray", "", "toIntArray", "", "", "toLongArray", "", "", "toShortArray", "K", androidx.exifinterface.media.ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "Lkotlin/Pair;", "transform", "", "associate", "keySelector", "associateBy", "valueTransform", "", "M", "associateByTo", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Ljava/lang/Iterable;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "toCollection", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "toList", "toMutableList", "", "toSet", "flatMap", "Lkotlin/sequences/Sequence;", "flatMapSequence", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/util/List;", "flatMapTo", "flatMapSequenceTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "distinct", "distinctBy", "other", "intersect", "subtract", "", "toMutableSet", "union", "all", org.apache.commons.codec.language.bm.Languages.ANY, me.leolin.shortcutbadger.impl.NewHtcHomeBadger.COUNT, "initial", "acc", "operation", "fold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "foldRight", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "foldRightIndexed", "(Ljava/util/List;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "action", "forEach", "forEachIndexed", "maxOrThrow", "(Ljava/lang/Iterable;)D", org.apache.tools.ant.types.selectors.DepthSelector.MAX_KEY, "(Ljava/lang/Iterable;)F", "(Ljava/lang/Iterable;)Ljava/lang/Comparable;", "maxByOrThrow", "maxBy", "maxByOrNull", "maxOrNull", "(Ljava/lang/Iterable;)Ljava/lang/Double;", "(Ljava/lang/Iterable;)Ljava/lang/Float;", "maxWithOrThrow", "(Ljava/lang/Iterable;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWith", "maxWithOrNull", "minOrThrow", org.apache.tools.ant.types.selectors.DepthSelector.MIN_KEY, "minByOrThrow", "minBy", "minByOrNull", "minOrNull", "minWithOrThrow", "minWith", "minWithOrNull", "none", "onEach", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function1;)Ljava/lang/Iterable;", "onEachIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Iterable;", androidx.exifinterface.media.ExifInterface.LATITUDE_SOUTH, "reduce", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Ljava/lang/Iterable;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "reduceRight", "(Ljava/util/List;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceRightIndexed", "(Ljava/util/List;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceRightIndexedOrNull", "reduceRightOrNull", "runningFold", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "runningFoldIndexed", "(Ljava/lang/Iterable;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/util/List;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "sumBy", "sumByDouble", "requireNoNulls", com.anythink.core.api.ATAdConst.NETWORK_REQUEST_PARAMS_KEY.BANNER_SIZE, com.ss.android.socialbase.downloader.utils.DownloadUtils.VALUE_CHUNKED, "minus", "(Ljava/lang/Iterable;Ljava/lang/Object;)Ljava/util/List;", "", "elements", "(Ljava/lang/Iterable;[Ljava/lang/Object;)Ljava/util/List;", "partition", "plus", "(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/List;", "(Ljava/util/Collection;[Ljava/lang/Object;)Ljava/util/List;", "step", "partialWindows", "windowed", "zip", "a", "b", "(Ljava/lang/Iterable;[Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/util/List;", "zipWithNext", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", androidx.exifinterface.media.ExifInterface.GPS_MEASUREMENT_IN_PROGRESS, "buffer", "", "separator", com.alibaba.sdk.android.oss.common.RequestParameters.PREFIX, "postfix", "limit", "truncated", "joinTo", "(Ljava/lang/Iterable;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "asSequence", "averageOfByte", "average", "averageOfShort", "averageOfInt", "averageOfLong", "averageOfFloat", "averageOfDouble", "sumOfByte", "(Ljava/lang/Iterable;)I", "sum", "sumOfShort", "sumOfInt", "sumOfLong", "(Ljava/lang/Iterable;)J", "sumOfFloat", "sumOfDouble", "kotlin-stdlib"}, k = 5, mv = {1, 7, 1}, xs = "kotlin/collections/CollectionsKt")
/* loaded from: classes14.dex */
public class CollectionsKt___CollectionsKt extends kotlin.collections.CollectionsKt___CollectionsJvmKt {
    public static final <T> boolean all(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((iterable instanceof java.util.Collection) && ((java.util.Collection) iterable).isEmpty()) {
            return true;
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (!predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.Collection ? !((java.util.Collection) iterable).isEmpty() : iterable.iterator().hasNext();
    }

    public static final <T> boolean any(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((iterable instanceof java.util.Collection) && ((java.util.Collection) iterable).isEmpty()) {
            return false;
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> kotlin.sequences.Sequence<T> asSequence(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return new kotlin.collections.CollectionsKt___CollectionsKt$asSequence$$inlined$Sequence$1(iterable);
    }

    @org.jetbrains.annotations.NotNull
    public static <T, K, V> java.util.Map<K, V> associate(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.Pair<? extends K, ? extends V>> transform) {
        int mapCapacity;
        int coerceAtLeast;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        coerceAtLeast = kotlin.ranges.RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap(coerceAtLeast);
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.Map<K, T> associateBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        int mapCapacity;
        int coerceAtLeast;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        coerceAtLeast = kotlin.ranges.RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap(coerceAtLeast);
        for (T t : iterable) {
            linkedHashMap.put(keySelector.invoke(t), t);
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, V> associateBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        int mapCapacity;
        int coerceAtLeast;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        coerceAtLeast = kotlin.ranges.RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap(coerceAtLeast);
        for (T t : iterable) {
            linkedHashMap.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, M extends java.util.Map<? super K, ? super T>> M associateByTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (T t : iterable) {
            destination.put(keySelector.invoke(t), t);
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, ? super V>> M associateByTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (T t : iterable) {
            destination.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, ? super V>> M associateTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.Pair<? extends K, ? extends V>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            destination.put(invoke.getFirst(), invoke.getSecond());
        }
        return destination;
    }

    @kotlin.SinceKotlin(version = "1.3")
    @org.jetbrains.annotations.NotNull
    public static final <K, V> java.util.Map<K, V> associateWith(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends K> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super K, ? extends V> valueSelector) {
        int mapCapacity;
        int coerceAtLeast;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        coerceAtLeast = kotlin.ranges.RangesKt___RangesKt.coerceAtLeast(mapCapacity, 16);
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap(coerceAtLeast);
        for (K k : iterable) {
            linkedHashMap.put(k, valueSelector.invoke(k));
        }
        return linkedHashMap;
    }

    @kotlin.SinceKotlin(version = "1.3")
    @org.jetbrains.annotations.NotNull
    public static final <K, V, M extends java.util.Map<? super K, ? super V>> M associateWithTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends K> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super K, ? extends V> valueSelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        for (K k : iterable) {
            destination.put(k, valueSelector.invoke(k));
        }
        return destination;
    }

    @kotlin.jvm.JvmName(name = "averageOfByte")
    public static final double averageOfByte(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Byte> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Byte> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().byteValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().doubleValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().floatValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfInt")
    public static final double averageOfInt(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Integer> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Integer> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().intValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfLong")
    public static final double averageOfLong(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Long> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Long> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().longValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfShort")
    public static final double averageOfShort(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Short> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Short> it = iterable.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().shortValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<java.util.List<T>> chunked(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return windowed(iterable, i, i, true);
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> chunked(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.util.List<? extends T>, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return windowed(iterable, i, i, true, transform);
    }

    public static <T> boolean contains(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.Collection ? ((java.util.Collection) iterable).contains(t) : indexOf(iterable, t) >= 0;
    }

    public static final <T> int count(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.Collection) {
            return ((java.util.Collection) iterable).size();
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            it.next();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    public static final <T> int count(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = 0;
        if ((iterable instanceof java.util.Collection) && ((java.util.Collection) iterable).isEmpty()) {
            return 0;
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue() && (i = i + 1) < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> distinct(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return toList(toMutableSet(iterable));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.List<T> distinctBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.HashSet hashSet = new java.util.HashSet();
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (hashSet.add(selector.invoke(t))) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> drop(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i) {
        java.util.ArrayList arrayList;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        int i2 = 0;
        if (!(i >= 0)) {
            throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        }
        if (i == 0) {
            return toList(iterable);
        }
        if (iterable instanceof java.util.Collection) {
            java.util.Collection collection = (java.util.Collection) iterable;
            int size = collection.size() - i;
            if (size <= 0) {
                return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
            }
            if (size == 1) {
                return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(last(iterable));
            }
            arrayList = new java.util.ArrayList(size);
            if (iterable instanceof java.util.List) {
                if (iterable instanceof java.util.RandomAccess) {
                    int size2 = collection.size();
                    while (i < size2) {
                        arrayList.add(((java.util.List) iterable).get(i));
                        i++;
                    }
                } else {
                    java.util.ListIterator listIterator = ((java.util.List) iterable).listIterator(i);
                    while (listIterator.hasNext()) {
                        arrayList.add(listIterator.next());
                    }
                }
                return arrayList;
            }
        } else {
            arrayList = new java.util.ArrayList();
        }
        for (T t : iterable) {
            if (i2 >= i) {
                arrayList.add(t);
            } else {
                i2++;
            }
        }
        return kotlin.collections.CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> dropLast(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, int i) {
        int coerceAtLeast;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (i >= 0) {
            java.util.List<? extends T> list2 = list;
            coerceAtLeast = kotlin.ranges.RangesKt___RangesKt.coerceAtLeast(list.size() - i, 0);
            return take(list2, coerceAtLeast);
        }
        throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> dropLastWhile(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        if (!list.isEmpty()) {
            java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                if (!predicate.invoke(listIterator.previous()).booleanValue()) {
                    return take(list, listIterator.nextIndex() + 1);
                }
            }
        }
        return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> dropWhile(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        boolean z = false;
        for (T t : iterable) {
            if (z) {
                arrayList.add(t);
            } else if (!predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
                z = true;
            }
        }
        return arrayList;
    }

    public static <T> T elementAt(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.List ? (T) ((java.util.List) iterable).get(i) : (T) elementAtOrElse(iterable, i, new kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1(i));
    }

    public static final <T> T elementAtOrElse(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends T> defaultValue) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(defaultValue, "defaultValue");
        if (iterable instanceof java.util.List) {
            java.util.List list = (java.util.List) iterable;
            return (i < 0 || i > kotlin.collections.CollectionsKt__CollectionsKt.getLastIndex(list)) ? defaultValue.invoke(java.lang.Integer.valueOf(i)) : (T) list.get(i);
        }
        if (i < 0) {
            return defaultValue.invoke(java.lang.Integer.valueOf(i));
        }
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i == i2) {
                return t;
            }
            i2 = i3;
        }
        return defaultValue.invoke(java.lang.Integer.valueOf(i));
    }

    @org.jetbrains.annotations.Nullable
    public static final <T> T elementAtOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return (T) getOrNull((java.util.List) iterable, i);
        }
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : iterable) {
            int i3 = i2 + 1;
            if (i == i2) {
                return t;
            }
            i2 = i3;
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> filter(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> filterIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.mo5invoke(java.lang.Integer.valueOf(i), t).booleanValue()) {
                arrayList.add(t);
            }
            i = i2;
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterIndexedTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.mo5invoke(java.lang.Integer.valueOf(i), t).booleanValue()) {
                destination.add(t);
            }
            i = i2;
        }
        return destination;
    }

    public static final /* synthetic */ <R> java.util.List<R> filterIsInstance(java.lang.Iterable<?> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (java.lang.Object obj : iterable) {
            kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof java.lang.Object) {
                arrayList.add(obj);
            }
        }
        return arrayList;
    }

    public static final /* synthetic */ <R, C extends java.util.Collection<? super R>> C filterIsInstanceTo(java.lang.Iterable<?> iterable, C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        for (java.lang.Object obj : iterable) {
            kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof java.lang.Object) {
                destination.add(obj);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> filterNot(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (!predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> filterNotNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return (java.util.List) filterNotNullTo(iterable, new java.util.ArrayList());
    }

    @org.jetbrains.annotations.NotNull
    public static final <C extends java.util.Collection<? super T>, T> C filterNotNullTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        for (T t : iterable) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterNotTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : iterable) {
            if (!predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : iterable) {
            if (predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    public static <T> T first(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return (T) first((java.util.List) iterable);
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new java.util.NoSuchElementException("Collection is empty.");
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    public static final <T> T first(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : iterable) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new java.util.NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static <T> T first(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (list.isEmpty()) {
            throw new java.util.NoSuchElementException("List is empty.");
        }
        return list.get(0);
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T firstOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            java.util.List list = (java.util.List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(0);
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T firstOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : iterable) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T firstOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (list.isEmpty()) {
            return null;
        }
        return list.get(0);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> flatMap(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends java.lang.Iterable<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, transform.invoke(it.next()));
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapSequence")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R> java.util.List<R> flatMapSequence(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.sequences.Sequence<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, transform.invoke(it.next()));
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapSequenceTo")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R, C extends java.util.Collection<? super R>> C flatMapSequenceTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.sequences.Sequence<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(destination, transform.invoke(it.next()));
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C flatMapTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends java.lang.Iterable<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(destination, transform.invoke(it.next()));
        }
        return destination;
    }

    public static final <T, R> R fold(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = operation.mo5invoke(r, it.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = operation.invoke(java.lang.Integer.valueOf(i), r, t);
            i = i2;
        }
        return r;
    }

    public static final <T, R> R foldRight(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super R, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        if (!list.isEmpty()) {
            java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = operation.mo5invoke(listIterator.previous(), r);
            }
        }
        return r;
    }

    public static final <T, R> R foldRightIndexed(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super T, ? super R, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        if (!list.isEmpty()) {
            java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
            while (listIterator.hasPrevious()) {
                r = operation.invoke(java.lang.Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), r);
            }
        }
        return r;
    }

    @kotlin.internal.HidesMembers
    public static final <T> void forEach(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            action.invoke(it.next());
        }
    }

    public static final <T> void forEachIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            action.mo5invoke(java.lang.Integer.valueOf(i), t);
            i = i2;
        }
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T getOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (i < 0 || i > kotlin.collections.CollectionsKt__CollectionsKt.getLastIndex(list)) {
            return null;
        }
        return list.get(i);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.Map<K, java.util.List<T>> groupBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : iterable) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((java.util.List) obj).add(t);
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, java.util.List<V>> groupBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : iterable) {
            K invoke = keySelector.invoke(t);
            java.util.List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new java.util.ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, M extends java.util.Map<? super K, java.util.List<T>>> M groupByTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (T t : iterable) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                destination.put(invoke, obj);
            }
            ((java.util.List) obj).add(t);
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, java.util.List<V>>> M groupByTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (T t : iterable) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                destination.put(invoke, obj);
            }
            ((java.util.List) obj).add(valueTransform.invoke(t));
        }
        return destination;
    }

    @kotlin.SinceKotlin(version = "1.1")
    @org.jetbrains.annotations.NotNull
    public static final <T, K> kotlin.collections.Grouping<T, K> groupingBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new kotlin.collections.CollectionsKt___CollectionsKt$groupingBy$1(iterable, keySelector);
    }

    public static final <T> int indexOf(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return ((java.util.List) iterable).indexOf(t);
        }
        int i = 0;
        for (T t2 : iterable) {
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (kotlin.jvm.internal.Intrinsics.areEqual(t, t2)) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static <T> int indexOf(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        return list.indexOf(t);
    }

    public static final <T> int indexOfFirst(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = 0;
        for (T t : iterable) {
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.Iterator<? extends T> it = list.iterator();
        int i = 0;
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = -1;
        int i2 = 0;
        for (T t : iterable) {
            if (i2 < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    public static final <T> int indexOfLast(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (predicate.invoke(listIterator.previous()).booleanValue()) {
                return listIterator.nextIndex();
            }
        }
        return -1;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> intersect(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        java.util.Set<T> mutableSet = toMutableSet(iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(mutableSet, other);
        return mutableSet;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, A extends java.lang.Appendable> A joinTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull A buffer, @org.jetbrains.annotations.NotNull java.lang.CharSequence separator, @org.jetbrains.annotations.NotNull java.lang.CharSequence prefix, @org.jetbrains.annotations.NotNull java.lang.CharSequence postfix, int i, @org.jetbrains.annotations.NotNull java.lang.CharSequence truncated, @org.jetbrains.annotations.Nullable kotlin.jvm.functions.Function1<? super T, ? extends java.lang.CharSequence> function1) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(buffer, "buffer");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(separator, "separator");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(prefix, "prefix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(postfix, "postfix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(truncated, "truncated");
        buffer.append(prefix);
        int i2 = 0;
        for (T t : iterable) {
            i2++;
            if (i2 > 1) {
                buffer.append(separator);
            }
            if (i >= 0 && i2 > i) {
                break;
            }
            kotlin.text.StringsKt__AppendableKt.appendElement(buffer, t, function1);
        }
        if (i >= 0 && i2 > i) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    public static /* synthetic */ java.lang.Appendable joinTo$default(java.lang.Iterable iterable, java.lang.Appendable appendable, java.lang.CharSequence charSequence, java.lang.CharSequence charSequence2, java.lang.CharSequence charSequence3, int i, java.lang.CharSequence charSequence4, kotlin.jvm.functions.Function1 function1, int i2, java.lang.Object obj) {
        return joinTo(iterable, appendable, (i2 & 2) != 0 ? ", " : charSequence, (i2 & 4) != 0 ? "" : charSequence2, (i2 & 8) == 0 ? charSequence3 : "", (i2 & 16) != 0 ? -1 : i, (i2 & 32) != 0 ? "..." : charSequence4, (i2 & 64) != 0 ? null : function1);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.lang.String joinToString(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.CharSequence separator, @org.jetbrains.annotations.NotNull java.lang.CharSequence prefix, @org.jetbrains.annotations.NotNull java.lang.CharSequence postfix, int i, @org.jetbrains.annotations.NotNull java.lang.CharSequence truncated, @org.jetbrains.annotations.Nullable kotlin.jvm.functions.Function1<? super T, ? extends java.lang.CharSequence> function1) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(separator, "separator");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(prefix, "prefix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(postfix, "postfix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(truncated, "truncated");
        java.lang.String sb = ((java.lang.StringBuilder) joinTo(iterable, new java.lang.StringBuilder(), separator, prefix, postfix, i, truncated, function1)).toString();
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ java.lang.String joinToString$default(java.lang.Iterable iterable, java.lang.CharSequence charSequence, java.lang.CharSequence charSequence2, java.lang.CharSequence charSequence3, int i, java.lang.CharSequence charSequence4, kotlin.jvm.functions.Function1 function1, int i2, java.lang.Object obj) {
        if ((i2 & 1) != 0) {
            charSequence = ", ";
        }
        java.lang.CharSequence charSequence5 = (i2 & 2) != 0 ? "" : charSequence2;
        java.lang.CharSequence charSequence6 = (i2 & 4) == 0 ? charSequence3 : "";
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
            charSequence4 = "...";
        }
        java.lang.CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            function1 = null;
        }
        return joinToString(iterable, charSequence, charSequence5, charSequence6, i3, charSequence7, function1);
    }

    public static <T> T last(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return (T) last((java.util.List) iterable);
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T last(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (predicate.invoke(t2).booleanValue()) {
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        throw new java.util.NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static <T> T last(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (list.isEmpty()) {
            throw new java.util.NoSuchElementException("List is empty.");
        }
        return list.get(kotlin.collections.CollectionsKt__CollectionsKt.getLastIndex(list));
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    public static final <T> T last(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (predicate.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        throw new java.util.NoSuchElementException("List contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return ((java.util.List) iterable).lastIndexOf(t);
        }
        int i = -1;
        int i2 = 0;
        for (T t2 : iterable) {
            if (i2 < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (kotlin.jvm.internal.Intrinsics.areEqual(t, t2)) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    public static final <T> int lastIndexOf(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        return list.lastIndexOf(t);
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T lastOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            java.util.List list = (java.util.List) iterable;
            if (list.isEmpty()) {
                return null;
            }
            return (T) list.get(list.size() - 1);
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T lastOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        for (T t2 : iterable) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T lastOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (list.isEmpty()) {
            return null;
        }
        return list.get(list.size() - 1);
    }

    /* JADX WARN: Type inference failed for: r0v4, types: [T, java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T lastOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            T previous = listIterator.previous();
            if (predicate.invoke(previous).booleanValue()) {
                return previous;
            }
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static <T, R> java.util.List<R> map(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(transform.invoke(it.next()));
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> mapIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            arrayList.add(transform.mo5invoke(java.lang.Integer.valueOf(i), t));
            i = i2;
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> mapIndexedNotNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R mo5invoke = transform.mo5invoke(java.lang.Integer.valueOf(i), t);
            if (mo5invoke != null) {
                arrayList.add(mo5invoke);
            }
            i = i2;
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapIndexedNotNullTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R mo5invoke = transform.mo5invoke(java.lang.Integer.valueOf(i), t);
            if (mo5invoke != null) {
                destination.add(mo5invoke);
            }
            i = i2;
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapIndexedTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        int i = 0;
        for (T t : iterable) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.mo5invoke(java.lang.Integer.valueOf(i), t));
            i = i2;
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> mapNotNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = transform.invoke(it.next());
            if (invoke != null) {
                arrayList.add(invoke);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapNotNullTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            R invoke = transform.invoke(it.next());
            if (invoke != null) {
                destination.add(invoke);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapTo(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            destination.add(transform.invoke(it.next()));
        }
        return destination;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T, R extends java.lang.Comparable<? super R>> T maxByOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) < 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxByOrThrow")
    public static final <T, R extends java.lang.Comparable<? super R>> T maxByOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) < 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static <T extends java.lang.Comparable<? super T>> T maxOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: maxOrNull, reason: collision with other method in class */
    public static final java.lang.Double m270maxOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.max(doubleValue, it.next().doubleValue());
        }
        return java.lang.Double.valueOf(doubleValue);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: maxOrNull, reason: collision with other method in class */
    public static final java.lang.Float m271maxOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.max(floatValue, it.next().floatValue());
        }
        return java.lang.Float.valueOf(floatValue);
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    public static final double maxOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.max(doubleValue, it.next().doubleValue());
        }
        return doubleValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    /* renamed from: maxOrThrow, reason: collision with other method in class */
    public static final float m272maxOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.max(floatValue, it.next().floatValue());
        }
        return floatValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    @org.jetbrains.annotations.NotNull
    /* renamed from: maxOrThrow, reason: collision with other method in class */
    public static final <T extends java.lang.Comparable<? super T>> T m273maxOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T> T maxWithOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxWithOrThrow")
    public static final <T> T maxWithOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T, R extends java.lang.Comparable<? super R>> T minByOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) > 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minByOrThrow")
    public static final <T, R extends java.lang.Comparable<? super R>> T minByOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) > 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static <T extends java.lang.Comparable<? super T>> T minOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: minOrNull, reason: collision with other method in class */
    public static final java.lang.Double m274minOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.min(doubleValue, it.next().doubleValue());
        }
        return java.lang.Double.valueOf(doubleValue);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: minOrNull, reason: collision with other method in class */
    public static final java.lang.Float m275minOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.min(floatValue, it.next().floatValue());
        }
        return java.lang.Float.valueOf(floatValue);
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    public static final double minOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.min(doubleValue, it.next().doubleValue());
        }
        return doubleValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    /* renamed from: minOrThrow, reason: collision with other method in class */
    public static final float m276minOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.min(floatValue, it.next().floatValue());
        }
        return floatValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    @org.jetbrains.annotations.NotNull
    /* renamed from: minOrThrow, reason: collision with other method in class */
    public static final <T extends java.lang.Comparable<? super T>> T m277minOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T> T minWithOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minWithOrThrow")
    public static final <T> T minWithOrThrow(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> minus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        java.util.Collection convertToSetForSetOperationWith = kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperationWith(elements, iterable);
        if (convertToSetForSetOperationWith.isEmpty()) {
            return toList(iterable);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (!convertToSetForSetOperationWith.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> minus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.ArrayList arrayList = new java.util.ArrayList(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        boolean z = false;
        for (T t2 : iterable) {
            boolean z2 = true;
            if (!z && kotlin.jvm.internal.Intrinsics.areEqual(t2, t)) {
                z = true;
                z2 = false;
            }
            if (z2) {
                arrayList.add(t2);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> minus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        java.util.Collection convertToSetForSetOperation = kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation(elements);
        if (convertToSetForSetOperation.isEmpty()) {
            return toList(iterable);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (!convertToSetForSetOperation.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> minus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull T[] elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        if (elements.length == 0) {
            return toList(iterable);
        }
        java.util.Collection convertToSetForSetOperation = kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation(elements);
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (!convertToSetForSetOperation.contains(t)) {
                arrayList.add(t);
            }
        }
        return arrayList;
    }

    public static final <T> boolean none(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.Collection ? ((java.util.Collection) iterable).isEmpty() : !iterable.iterator().hasNext();
    }

    public static final <T> boolean none(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        if ((iterable instanceof java.util.Collection) && ((java.util.Collection) iterable).isEmpty()) {
            return true;
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @kotlin.SinceKotlin(version = "1.1")
    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.lang.Iterable<? extends T>> C onEach(@org.jetbrains.annotations.NotNull C c, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(c, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        java.util.Iterator<T> it = c.iterator();
        while (it.hasNext()) {
            action.invoke(it.next());
        }
        return c;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.lang.Iterable<? extends T>> C onEachIndexed(@org.jetbrains.annotations.NotNull C c, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(c, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        int i = 0;
        for (T t : c) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            action.mo5invoke(java.lang.Integer.valueOf(i), t);
            i = i2;
        }
        return c;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.Pair<java.util.List<T>, java.util.List<T>> partition(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        java.util.ArrayList arrayList2 = new java.util.ArrayList();
        for (T t : iterable) {
            if (predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            } else {
                arrayList2.add(t);
            }
        }
        return new kotlin.Pair<>(arrayList, arrayList2);
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        if (iterable instanceof java.util.Collection) {
            return plus((java.util.Collection) iterable, (java.lang.Iterable) elements);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.Collection) {
            return plus((java.util.Collection) iterable, (java.lang.Object) t);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        arrayList.add(t);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull T[] elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        if (iterable instanceof java.util.Collection) {
            return plus((java.util.Collection) iterable, (java.lang.Object[]) elements);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        if (!(elements instanceof java.util.Collection)) {
            java.util.ArrayList arrayList = new java.util.ArrayList(collection);
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
            return arrayList;
        }
        java.util.Collection collection2 = (java.util.Collection) elements;
        java.util.ArrayList arrayList2 = new java.util.ArrayList(collection.size() + collection2.size());
        arrayList2.addAll(collection);
        arrayList2.addAll(collection2);
        return arrayList2;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        java.util.ArrayList arrayList = new java.util.ArrayList(collection.size() + 1);
        arrayList.addAll(collection);
        arrayList.add(t);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        java.util.ArrayList arrayList = new java.util.ArrayList(collection.size() + 10);
        arrayList.addAll(collection);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> plus(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, @org.jetbrains.annotations.NotNull T[] elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        java.util.ArrayList arrayList = new java.util.ArrayList(collection.size() + elements.length);
        arrayList.addAll(collection);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(arrayList, elements);
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.3")
    public static <T> T random(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, @org.jetbrains.annotations.NotNull kotlin.random.Random random) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(random, "random");
        if (collection.isEmpty()) {
            throw new java.util.NoSuchElementException("Collection is empty.");
        }
        return (T) elementAt(collection, random.nextInt(collection.size()));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.Nullable
    public static final <T> T randomOrNull(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection, @org.jetbrains.annotations.NotNull kotlin.random.Random random) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(random, "random");
        if (collection.isEmpty()) {
            return null;
        }
        return (T) elementAt(collection, random.nextInt(collection.size()));
    }

    public static final <S, T extends S> S reduce(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.lang.UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.mo5invoke(next, it.next());
        }
        return next;
    }

    public static final <S, T extends S> S reduceIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.lang.UnsupportedOperationException("Empty collection can't be reduced.");
        }
        S next = it.next();
        int i = 1;
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            next = operation.invoke(java.lang.Integer.valueOf(i), next, it.next());
            i = i2;
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceIndexedOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        int i = 1;
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            next = operation.invoke(java.lang.Integer.valueOf(i), next, it.next());
            i = i2;
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.mo5invoke(next, it.next());
        }
        return next;
    }

    public static final <S, T extends S> S reduceRight(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super S, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            throw new java.lang.UnsupportedOperationException("Empty list can't be reduced.");
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.mo5invoke(listIterator.previous(), previous);
        }
        return previous;
    }

    public static final <S, T extends S> S reduceRightIndexed(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super T, ? super S, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            throw new java.lang.UnsupportedOperationException("Empty list can't be reduced.");
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.invoke(java.lang.Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), previous);
        }
        return previous;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceRightIndexedOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super T, ? super S, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.invoke(java.lang.Integer.valueOf(listIterator.previousIndex()), listIterator.previous(), previous);
        }
        return previous;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceRightOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super S, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        if (!listIterator.hasPrevious()) {
            return null;
        }
        S previous = listIterator.previous();
        while (listIterator.hasPrevious()) {
            previous = operation.mo5invoke(listIterator.previous(), previous);
        }
        return previous;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T> java.lang.Iterable<T> requireNoNulls(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator it = iterable.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new java.lang.IllegalArgumentException("null element found in " + iterable + '.');
            }
        }
        return iterable;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> requireNoNulls(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        java.util.Iterator it = list.iterator();
        while (it.hasNext()) {
            if (it.next() == null) {
                throw new java.lang.IllegalArgumentException("null element found in " + list + '.');
            }
        }
        return list;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> reversed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if ((iterable instanceof java.util.Collection) && ((java.util.Collection) iterable).size() <= 1) {
            return toList(iterable);
        }
        java.util.List<T> mutableList = toMutableList(iterable);
        kotlin.collections.CollectionsKt___CollectionsJvmKt.reverse(mutableList);
        return mutableList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> runningFold(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int collectionSizeOrDefault = kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = operation.mo5invoke(r, it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> runningFoldIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int collectionSizeOrDefault = kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        java.util.Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            r = operation.invoke(java.lang.Integer.valueOf(i), r, it.next());
            arrayList.add(r);
            i++;
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <S, T extends S> java.util.List<S> runningReduce(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        S next = it.next();
        java.util.ArrayList arrayList = new java.util.ArrayList(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        arrayList.add(next);
        while (it.hasNext()) {
            next = operation.mo5invoke(next, it.next());
            arrayList.add(next);
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <S, T extends S> java.util.List<S> runningReduceIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        S next = it.next();
        java.util.ArrayList arrayList = new java.util.ArrayList(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10));
        arrayList.add(next);
        int i = 1;
        while (it.hasNext()) {
            next = operation.invoke(java.lang.Integer.valueOf(i), next, it.next());
            arrayList.add(next);
            i++;
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> scan(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int collectionSizeOrDefault = kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            r = operation.mo5invoke(r, it.next());
            arrayList.add(r);
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> scanIndexed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int collectionSizeOrDefault = kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 9);
        if (collectionSizeOrDefault == 0) {
            return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(r);
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(collectionSizeOrDefault + 1);
        arrayList.add(r);
        java.util.Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            r = operation.invoke(java.lang.Integer.valueOf(i), r, it.next());
            arrayList.add(r);
            i++;
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.3")
    public static final <T> void shuffle(@org.jetbrains.annotations.NotNull java.util.List<T> list, @org.jetbrains.annotations.NotNull kotlin.random.Random random) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(random, "random");
        for (int lastIndex = kotlin.collections.CollectionsKt__CollectionsKt.getLastIndex(list); lastIndex > 0; lastIndex--) {
            int nextInt = random.nextInt(lastIndex + 1);
            list.set(nextInt, list.set(lastIndex, list.get(nextInt)));
        }
    }

    public static <T> T single(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            return (T) single((java.util.List) iterable);
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException("Collection is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new java.lang.IllegalArgumentException("Collection has more than one element.");
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T single(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : iterable) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new java.lang.IllegalArgumentException("Collection contains more than one matching element.");
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        throw new java.util.NoSuchElementException("Collection contains no element matching the predicate.");
    }

    public static final <T> T single(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        int size = list.size();
        if (size == 0) {
            throw new java.util.NoSuchElementException("List is empty.");
        }
        if (size == 1) {
            return list.get(0);
        }
        throw new java.lang.IllegalArgumentException("List has more than one element.");
    }

    @org.jetbrains.annotations.Nullable
    public static final <T> T singleOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (iterable instanceof java.util.List) {
            java.util.List list = (java.util.List) iterable;
            if (list.size() == 1) {
                return (T) list.get(0);
            }
            return null;
        }
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T singleOrNull(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        boolean z = false;
        T t = null;
        for (T t2 : iterable) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T singleOrNull(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (list.size() == 1) {
            return list.get(0);
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> slice(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Integer> indices) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(indices, "indices");
        int collectionSizeOrDefault = kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(indices, 10);
        if (collectionSizeOrDefault == 0) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(collectionSizeOrDefault);
        java.util.Iterator<java.lang.Integer> it = indices.iterator();
        while (it.hasNext()) {
            arrayList.add(list.get(it.next().intValue()));
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> slice(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.ranges.IntRange indices) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(indices, "indices");
        return indices.isEmpty() ? kotlin.collections.CollectionsKt__CollectionsKt.emptyList() : toList(list.subList(indices.getStart().intValue(), indices.getEndInclusive().intValue() + 1));
    }

    public static final <T, R extends java.lang.Comparable<? super R>> void sortBy(@org.jetbrains.annotations.NotNull java.util.List<T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        if (list.size() > 1) {
            kotlin.collections.CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2(selector));
        }
    }

    public static final <T, R extends java.lang.Comparable<? super R>> void sortByDescending(@org.jetbrains.annotations.NotNull java.util.List<T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        if (list.size() > 1) {
            kotlin.collections.CollectionsKt__MutableCollectionsJVMKt.sortWith(list, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
        }
    }

    public static final <T extends java.lang.Comparable<? super T>> void sortDescending(@org.jetbrains.annotations.NotNull java.util.List<T> list) {
        java.util.Comparator reverseOrder;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        reverseOrder = kotlin.comparisons.ComparisonsKt__ComparisonsKt.reverseOrder();
        kotlin.collections.CollectionsKt__MutableCollectionsJVMKt.sortWith(list, reverseOrder);
    }

    @org.jetbrains.annotations.NotNull
    public static <T extends java.lang.Comparable<? super T>> java.util.List<T> sorted(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (!(iterable instanceof java.util.Collection)) {
            java.util.List<T> mutableList = toMutableList(iterable);
            kotlin.collections.CollectionsKt__MutableCollectionsJVMKt.sort(mutableList);
            return mutableList;
        }
        java.util.Collection collection = (java.util.Collection) iterable;
        if (collection.size() <= 1) {
            return toList(iterable);
        }
        java.lang.Object[] array = collection.toArray(new java.lang.Comparable[0]);
        kotlin.jvm.internal.Intrinsics.checkNotNull(array, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");
        kotlin.jvm.internal.Intrinsics.checkNotNull(array, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt___CollectionsKt.sorted>");
        java.lang.Comparable[] comparableArr = (java.lang.Comparable[]) array;
        kotlin.collections.ArraysKt___ArraysJvmKt.sort(comparableArr);
        return kotlin.collections.ArraysKt___ArraysJvmKt.asList(comparableArr);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R extends java.lang.Comparable<? super R>> java.util.List<T> sortedBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        return sortedWith(iterable, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2(selector));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R extends java.lang.Comparable<? super R>> java.util.List<T> sortedByDescending(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        return sortedWith(iterable, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T extends java.lang.Comparable<? super T>> java.util.List<T> sortedDescending(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        java.util.Comparator reverseOrder;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        reverseOrder = kotlin.comparisons.ComparisonsKt__ComparisonsKt.reverseOrder();
        return sortedWith(iterable, reverseOrder);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> sortedWith(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        if (!(iterable instanceof java.util.Collection)) {
            java.util.List<T> mutableList = toMutableList(iterable);
            kotlin.collections.CollectionsKt__MutableCollectionsJVMKt.sortWith(mutableList, comparator);
            return mutableList;
        }
        java.util.Collection collection = (java.util.Collection) iterable;
        if (collection.size() <= 1) {
            return toList(iterable);
        }
        java.lang.Object[] array = collection.toArray(new java.lang.Object[0]);
        kotlin.jvm.internal.Intrinsics.checkNotNull(array, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");
        kotlin.jvm.internal.Intrinsics.checkNotNull(array, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.CollectionsKt___CollectionsKt.sortedWith>");
        kotlin.collections.ArraysKt___ArraysJvmKt.sortWith(array, comparator);
        return kotlin.collections.ArraysKt___ArraysJvmKt.asList(array);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> subtract(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        java.util.Set<T> mutableSet = toMutableSet(iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.removeAll(mutableSet, other);
        return mutableSet;
    }

    @kotlin.Deprecated(message = "Use sumOf instead.", replaceWith = @kotlin.ReplaceWith(expression = "this.sumOf(selector)", imports = {}))
    @kotlin.DeprecatedSinceKotlin(warningSince = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_5)
    public static final <T> int sumBy(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Integer> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += selector.invoke(it.next()).intValue();
        }
        return i;
    }

    @kotlin.Deprecated(message = "Use sumOf instead.", replaceWith = @kotlin.ReplaceWith(expression = "this.sumOf(selector)", imports = {}))
    @kotlin.DeprecatedSinceKotlin(warningSince = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_5)
    public static final <T> double sumByDouble(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Double> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = iterable.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += selector.invoke(it.next()).doubleValue();
        }
        return d;
    }

    @kotlin.jvm.JvmName(name = "sumOfByte")
    public static final int sumOfByte(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Byte> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Byte> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().byteValue();
        }
        return i;
    }

    @kotlin.jvm.JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Double> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Double> it = iterable.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += it.next().doubleValue();
        }
        return d;
    }

    @kotlin.jvm.JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Float> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Float> it = iterable.iterator();
        float f = 0.0f;
        while (it.hasNext()) {
            f += it.next().floatValue();
        }
        return f;
    }

    @kotlin.jvm.JvmName(name = "sumOfInt")
    public static final int sumOfInt(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Integer> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Integer> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().intValue();
        }
        return i;
    }

    @kotlin.jvm.JvmName(name = "sumOfLong")
    public static final long sumOfLong(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Long> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Long> it = iterable.iterator();
        long j = 0;
        while (it.hasNext()) {
            j += it.next().longValue();
        }
        return j;
    }

    @kotlin.jvm.JvmName(name = "sumOfShort")
    public static final int sumOfShort(@org.jetbrains.annotations.NotNull java.lang.Iterable<java.lang.Short> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<java.lang.Short> it = iterable.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().shortValue();
        }
        return i;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> take(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        int i2 = 0;
        if (!(i >= 0)) {
            throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        }
        if (i == 0) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        if (iterable instanceof java.util.Collection) {
            if (i >= ((java.util.Collection) iterable).size()) {
                return toList(iterable);
            }
            if (i == 1) {
                return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(first(iterable));
            }
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(i);
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            arrayList.add(it.next());
            i2++;
            if (i2 == i) {
                break;
            }
        }
        return kotlin.collections.CollectionsKt__CollectionsKt.optimizeReadOnlyList(arrayList);
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> takeLast(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        if (!(i >= 0)) {
            throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
        }
        if (i == 0) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        int size = list.size();
        if (i >= size) {
            return toList(list);
        }
        if (i == 1) {
            return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(last((java.util.List) list));
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(i);
        if (list instanceof java.util.RandomAccess) {
            for (int i2 = size - i; i2 < size; i2++) {
                arrayList.add(list.get(i2));
            }
        } else {
            java.util.ListIterator<? extends T> listIterator = list.listIterator(size - i);
            while (listIterator.hasNext()) {
                arrayList.add(listIterator.next());
            }
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> takeLastWhile(@org.jetbrains.annotations.NotNull java.util.List<? extends T> list, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(list, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        if (list.isEmpty()) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        java.util.ListIterator<? extends T> listIterator = list.listIterator(list.size());
        while (listIterator.hasPrevious()) {
            if (!predicate.invoke(listIterator.previous()).booleanValue()) {
                listIterator.next();
                int size = list.size() - listIterator.nextIndex();
                if (size == 0) {
                    return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
                }
                java.util.ArrayList arrayList = new java.util.ArrayList(size);
                while (listIterator.hasNext()) {
                    arrayList.add(listIterator.next());
                }
                return arrayList;
            }
        }
        return toList(list);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> takeWhile(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (T t : iterable) {
            if (!predicate.invoke(t).booleanValue()) {
                break;
            }
            arrayList.add(t);
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final boolean[] toBooleanArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Boolean> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        boolean[] zArr = new boolean[collection.size()];
        java.util.Iterator<java.lang.Boolean> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            zArr[i] = it.next().booleanValue();
            i++;
        }
        return zArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final byte[] toByteArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Byte> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        byte[] bArr = new byte[collection.size()];
        java.util.Iterator<java.lang.Byte> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            bArr[i] = it.next().byteValue();
            i++;
        }
        return bArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final char[] toCharArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Character> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        char[] cArr = new char[collection.size()];
        java.util.Iterator<java.lang.Character> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            cArr[i] = it.next().charValue();
            i++;
        }
        return cArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C toCollection(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        java.util.Iterator<? extends T> it = iterable.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final double[] toDoubleArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Double> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        double[] dArr = new double[collection.size()];
        java.util.Iterator<java.lang.Double> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            dArr[i] = it.next().doubleValue();
            i++;
        }
        return dArr;
    }

    @org.jetbrains.annotations.NotNull
    public static float[] toFloatArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Float> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        float[] fArr = new float[collection.size()];
        java.util.Iterator<java.lang.Float> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            fArr[i] = it.next().floatValue();
            i++;
        }
        return fArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.HashSet<T> toHashSet(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        int mapCapacity;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 12));
        return (java.util.HashSet) toCollection(iterable, new java.util.HashSet(mapCapacity));
    }

    @org.jetbrains.annotations.NotNull
    public static int[] toIntArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Integer> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        int[] iArr = new int[collection.size()];
        java.util.Iterator<java.lang.Integer> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            iArr[i] = it.next().intValue();
            i++;
        }
        return iArr;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> toList(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (!(iterable instanceof java.util.Collection)) {
            return kotlin.collections.CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(iterable));
        }
        java.util.Collection collection = (java.util.Collection) iterable;
        int size = collection.size();
        if (size == 0) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        if (size != 1) {
            return toMutableList(collection);
        }
        return kotlin.collections.CollectionsKt__CollectionsJVMKt.listOf(iterable instanceof java.util.List ? ((java.util.List) iterable).get(0) : iterable.iterator().next());
    }

    @org.jetbrains.annotations.NotNull
    public static final long[] toLongArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Long> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        long[] jArr = new long[collection.size()];
        java.util.Iterator<java.lang.Long> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            jArr[i] = it.next().longValue();
            i++;
        }
        return jArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> toMutableList(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.Collection ? toMutableList((java.util.Collection) iterable) : (java.util.List) toCollection(iterable, new java.util.ArrayList());
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> toMutableList(@org.jetbrains.annotations.NotNull java.util.Collection<? extends T> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        return new java.util.ArrayList(collection);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> toMutableSet(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return iterable instanceof java.util.Collection ? new java.util.LinkedHashSet((java.util.Collection) iterable) : (java.util.Set) toCollection(iterable, new java.util.LinkedHashSet());
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.Set<T> toSet(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        java.util.Set<T> optimizeReadOnlySet;
        java.util.Set<T> emptySet;
        java.util.Set<T> of;
        int mapCapacity;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        if (!(iterable instanceof java.util.Collection)) {
            optimizeReadOnlySet = kotlin.collections.SetsKt__SetsKt.optimizeReadOnlySet((java.util.Set) toCollection(iterable, new java.util.LinkedHashSet()));
            return optimizeReadOnlySet;
        }
        java.util.Collection collection = (java.util.Collection) iterable;
        int size = collection.size();
        if (size == 0) {
            emptySet = kotlin.collections.SetsKt__SetsKt.emptySet();
            return emptySet;
        }
        if (size != 1) {
            mapCapacity = kotlin.collections.MapsKt__MapsJVMKt.mapCapacity(collection.size());
            return (java.util.Set) toCollection(iterable, new java.util.LinkedHashSet(mapCapacity));
        }
        of = kotlin.collections.SetsKt__SetsJVMKt.setOf(iterable instanceof java.util.List ? ((java.util.List) iterable).get(0) : iterable.iterator().next());
        return of;
    }

    @org.jetbrains.annotations.NotNull
    public static final short[] toShortArray(@org.jetbrains.annotations.NotNull java.util.Collection<java.lang.Short> collection) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(collection, "<this>");
        short[] sArr = new short[collection.size()];
        java.util.Iterator<java.lang.Short> it = collection.iterator();
        int i = 0;
        while (it.hasNext()) {
            sArr[i] = it.next().shortValue();
            i++;
        }
        return sArr;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> union(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        java.util.Set<T> mutableSet = toMutableSet(iterable);
        kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(mutableSet, other);
        return mutableSet;
    }

    /* JADX WARN: Code restructure failed: missing block: B:13:0x0031, code lost:
    
        r5 = kotlin.ranges.RangesKt___RangesKt.coerceAtMost(r10, r0 - r2);
     */
    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static final <T> java.util.List<java.util.List<T>> windowed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i, int i2, boolean z) {
        int coerceAtMost;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.collections.SlidingWindowKt.checkWindowSizeStep(i, i2);
        if (!(iterable instanceof java.util.RandomAccess) || !(iterable instanceof java.util.List)) {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            java.util.Iterator windowedIterator = kotlin.collections.SlidingWindowKt.windowedIterator(iterable.iterator(), i, i2, z, false);
            while (windowedIterator.hasNext()) {
                arrayList.add((java.util.List) windowedIterator.next());
            }
            return arrayList;
        }
        java.util.List list = (java.util.List) iterable;
        int size = list.size();
        java.util.ArrayList arrayList2 = new java.util.ArrayList((size / i2) + (size % i2 == 0 ? 0 : 1));
        int i3 = 0;
        while (true) {
            if (!(i3 >= 0 && i3 < size) || (coerceAtMost < i && !z)) {
                break;
            }
            java.util.ArrayList arrayList3 = new java.util.ArrayList(coerceAtMost);
            for (int i4 = 0; i4 < coerceAtMost; i4++) {
                arrayList3.add(list.get(i4 + i3));
            }
            arrayList2.add(arrayList3);
            i3 += i2;
        }
        return arrayList2;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> windowed(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, int i, int i2, boolean z, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.util.List<? extends T>, ? extends R> transform) {
        int coerceAtMost;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        kotlin.collections.SlidingWindowKt.checkWindowSizeStep(i, i2);
        if (!(iterable instanceof java.util.RandomAccess) || !(iterable instanceof java.util.List)) {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            java.util.Iterator windowedIterator = kotlin.collections.SlidingWindowKt.windowedIterator(iterable.iterator(), i, i2, z, true);
            while (windowedIterator.hasNext()) {
                arrayList.add(transform.invoke((java.util.List) windowedIterator.next()));
            }
            return arrayList;
        }
        java.util.List list = (java.util.List) iterable;
        int size = list.size();
        java.util.ArrayList arrayList2 = new java.util.ArrayList((size / i2) + (size % i2 == 0 ? 0 : 1));
        kotlin.collections.MovingSubList movingSubList = new kotlin.collections.MovingSubList(list);
        int i3 = 0;
        while (true) {
            if (!(i3 >= 0 && i3 < size)) {
                break;
            }
            coerceAtMost = kotlin.ranges.RangesKt___RangesKt.coerceAtMost(i, size - i3);
            if (!z && coerceAtMost < i) {
                break;
            }
            movingSubList.move(i3, coerceAtMost + i3);
            arrayList2.add(transform.invoke(movingSubList));
            i3 += i2;
        }
        return arrayList2;
    }

    public static /* synthetic */ java.util.List windowed$default(java.lang.Iterable iterable, int i, int i2, boolean z, int i3, java.lang.Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i, i2, z);
    }

    public static /* synthetic */ java.util.List windowed$default(java.lang.Iterable iterable, int i, int i2, boolean z, kotlin.jvm.functions.Function1 function1, int i3, java.lang.Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(iterable, i, i2, z, function1);
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.lang.Iterable<kotlin.collections.IndexedValue<T>> withIndex(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        return new kotlin.collections.IndexingIterable(new kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1(iterable));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<kotlin.Pair<T, R>> zip(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends R> other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        java.util.Iterator<? extends T> it = iterable.iterator();
        java.util.Iterator<? extends R> it2 = other.iterator();
        java.util.ArrayList arrayList = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(kotlin.TuplesKt.to(it.next(), it2.next()));
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, V> java.util.List<V> zip(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends R> other, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super R, ? extends V> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        java.util.Iterator<? extends R> it2 = other.iterator();
        java.util.ArrayList arrayList = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(other, 10)));
        while (it.hasNext() && it2.hasNext()) {
            arrayList.add(transform.mo5invoke(it.next(), it2.next()));
        }
        return arrayList;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<kotlin.Pair<T, R>> zip(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull R[] other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        int length = other.length;
        java.util.ArrayList arrayList = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), length));
        int i = 0;
        for (T t : iterable) {
            if (i >= length) {
                break;
            }
            arrayList.add(kotlin.TuplesKt.to(t, other[i]));
            i++;
        }
        return arrayList;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T, R, V> java.util.List<V> zip(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull R[] other, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super R, ? extends V> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        int length = other.length;
        java.util.ArrayList arrayList = new java.util.ArrayList(java.lang.Math.min(kotlin.collections.CollectionsKt__IterablesKt.collectionSizeOrDefault(iterable, 10), length));
        int i = 0;
        for (T t : iterable) {
            if (i >= length) {
                break;
            }
            arrayList.add(transform.mo5invoke(t, other[i]));
            i++;
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<kotlin.Pair<T, T>> zipWithNext(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(kotlin.TuplesKt.to(next, next2));
            next = next2;
        }
        return arrayList;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> java.util.List<R> zipWithNext(@org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> iterable, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(iterable, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = iterable.iterator();
        if (!it.hasNext()) {
            return kotlin.collections.CollectionsKt__CollectionsKt.emptyList();
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        defpackage.a next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            arrayList.add(transform.mo5invoke(next, next2));
            next = next2;
        }
        return arrayList;
    }
}
