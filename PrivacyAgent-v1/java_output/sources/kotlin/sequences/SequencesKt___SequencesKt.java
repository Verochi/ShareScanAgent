package kotlin.sequences;

/* JADX INFO: Access modifiers changed from: package-private */
@kotlin.Metadata(d1 = {"\u0000\u008a\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0016\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u001f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010\u0000\n\u0002\b\u0007\n\u0002\u0010\u000f\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0004\n\u0002\u0010%\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010!\n\u0000\n\u0002\u0010\"\n\u0000\n\u0002\u0010\u001c\n\u0002\b\u000b\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010#\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\u0006\n\u0002\b\u0003\n\u0002\u0010\u0007\n\u0002\b.\n\u0002\u0010\u0011\n\u0002\b\f\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\r\n\u0002\b\u0007\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\u0005\n\u0002\b\u0002\n\u0002\u0010\n\n\u0002\b\u0002\n\u0002\u0010\t\n\u0002\b\r\u001a-\u0010\u0005\u001a\u00020\u0004\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0004\b\u0005\u0010\u0006\u001a%\u0010\t\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007¢\u0006\u0004\b\t\u0010\n\u001a9\u0010\r\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u00072\u0012\u0010\f\u001a\u000e\u0012\u0004\u0012\u00020\u0007\u0012\u0004\u0012\u00028\u00000\u000b¢\u0006\u0004\b\r\u0010\u000e\u001a'\u0010\u000f\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\b\u001a\u00020\u0007¢\u0006\u0004\b\u000f\u0010\n\u001a\u001d\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u0010\u0010\u0011\u001a7\u0010\u0010\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u0010\u0010\u0013\u001a\u001f\u0010\u0014\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u0014\u0010\u0011\u001a9\u0010\u0014\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u0014\u0010\u0013\u001a*\u0010\u0015\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b\u0015\u0010\u0016\u001a0\u0010\u0017\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a0\u0010\u0018\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u001d\u0010\u0019\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u0019\u0010\u0011\u001a7\u0010\u0019\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u0019\u0010\u0013\u001a*\u0010\u001a\u001a\u00020\u0007\"\t\b\u0000\u0010\u0001¢\u0006\u0002\b\u0000*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000¢\u0006\u0004\b\u001a\u0010\u0016\u001a\u001f\u0010\u001b\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u001b\u0010\u0011\u001a9\u0010\u001b\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u001b\u0010\u0013\u001a\u001d\u0010\u001c\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u001c\u0010\u0011\u001a7\u0010\u001c\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u001c\u0010\u0013\u001a\u001f\u0010\u001d\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002¢\u0006\u0004\b\u001d\u0010\u0011\u001a9\u0010\u001d\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b\u001d\u0010\u0013\u001a$\u0010\u001f\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u001e\u001a\u00020\u0007\u001a0\u0010 \u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u001a0\u0010!\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u001aE\u0010%\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010\u0012\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\"\u001af\u0010)\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00000&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00012'\u0010\u0012\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\"H\u0086\bø\u0001\u0000¢\u0006\u0004\b)\u0010*\u001a$\u0010-\u001a\r\u0012\t\u0012\u00078\u0000¢\u0006\u0002\b,0\u0002\"\u0006\b\u0000\u0010+\u0018\u0001*\u0006\u0012\u0002\b\u00030\u0002H\u0086\b\u001a:\u0010.\u001a\u00028\u0001\"\u0006\b\u0000\u0010+\u0018\u0001\"\u0010\b\u0001\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00000&*\u0006\u0012\u0002\b\u00030\u00022\u0006\u0010(\u001a\u00028\u0001H\u0086\b¢\u0006\u0004\b.\u0010/\u001a0\u00100\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u001a\"\u00102\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\b\b\u0000\u0010\u0001*\u000201*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u001a=\u00103\u001a\u00028\u0000\"\u0010\b\u0000\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&\"\b\b\u0001\u0010\u0001*\u000201*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u00022\u0006\u0010(\u001a\u00028\u0000¢\u0006\u0004\b3\u0010/\u001aQ\u00104\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00000&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00012\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b4\u00105\u001aQ\u00106\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00000&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00012\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\b6\u00105\u001a$\u00107\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u001e\u001a\u00020\u0007\u001a0\u00108\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000b\u001a&\u0010:\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001aJ\u0010<\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010;\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001aJ\u0010=\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0016\b\u0004\u0010;\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000\u001a&\u0010>\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a8\u0010B\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010A\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000?j\n\u0012\u0006\b\u0000\u0012\u00028\u0000`@\u001aT\u0010H\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020G\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001e\u0010F\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020E0\u000bH\u0086\bø\u0001\u0000\u001aB\u0010J\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000G\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001a\\\u0010J\u001a\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020G\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010K\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000\u001a_\u0010N\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0018\b\u0002\u0010M*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00000L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bN\u0010O\u001ay\u0010N\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D\"\u0018\b\u0003\u0010M*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00032\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010K\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bN\u0010P\u001aq\u0010Q\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D\"\u0018\b\u0003\u0010M*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\u0006\b\u0000\u0012\u00028\u00020L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00032\u001e\u0010F\u001a\u001a\u0012\u0004\u0012\u00028\u0000\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00020E0\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bQ\u0010O\u001aB\u0010S\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010G\"\u0004\b\u0000\u0010C\"\u0004\b\u0001\u0010D*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000\u001a_\u0010T\u001a\u00028\u0002\"\u0004\b\u0000\u0010C\"\u0004\b\u0001\u0010D\"\u0018\b\u0002\u0010M*\u0012\u0012\u0006\b\u0000\u0012\u00028\u0000\u0012\u0006\b\u0000\u0012\u00028\u00010L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0012\u0010R\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0004\bT\u0010O\u001a7\u0010U\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0010\b\u0001\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00000&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u0001¢\u0006\u0004\bU\u0010/\u001a&\u0010X\u001a\u0012\u0012\u0004\u0012\u00028\u00000Vj\b\u0012\u0004\u0012\u00028\u0000`W\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001c\u0010Z\u001a\b\u0012\u0004\u0012\u00028\u00000Y\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001c\u0010\\\u001a\b\u0012\u0004\u0012\u00028\u00000[\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001c\u0010^\u001a\b\u0012\u0004\u0012\u00028\u00000]\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001aE\u0010b\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0018\u0010F\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010_0\u000bH\u0007¢\u0006\u0004\b`\u0010a\u001a<\u0010b\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0018\u0010F\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000b\u001aZ\u0010e\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022-\u0010F\u001a)\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010_0\"H\u0007¢\u0006\u0004\bc\u0010d\u001aZ\u0010e\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022-\u0010F\u001a)\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\"H\u0007¢\u0006\u0004\bf\u0010d\u001a]\u0010h\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0018\u0010F\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010_0\u000bH\u0087\bø\u0001\u0000¢\u0006\u0004\bg\u00105\u001a]\u0010h\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0018\u0010F\u001a\u0014\u0012\u0004\u0012\u00028\u0000\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00010\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bh\u00105\u001aH\u0010i\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y0G\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000\u001ab\u0010i\u001a\u0014\u0012\u0004\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020Y0G\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010K\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000\u001ac\u0010j\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u001c\b\u0002\u0010M*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000[0L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bj\u0010O\u001a}\u0010j\u001a\u00028\u0003\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C\"\u0004\b\u0002\u0010D\"\u001c\b\u0003\u0010M*\u0016\u0012\u0006\b\u0000\u0012\u00028\u0001\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00020[0L*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00032\u0012\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b2\u0012\u0010K\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00020\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bj\u0010P\u001aD\u0010l\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010k\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\b\u0004\u0010I\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000\u001a6\u0010m\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010F\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b\u001aK\u0010n\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022'\u0010F\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\"\u001aQ\u0010o\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u0010+*\u000201*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010F\u001a%\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\"\u001ar\u0010p\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u0010+*\u000201\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022)\u0010F\u001a%\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\"H\u0086\bø\u0001\u0000¢\u0006\u0004\bp\u0010*\u001al\u0010q\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022'\u0010F\u001a#\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\"H\u0086\bø\u0001\u0000¢\u0006\u0004\bq\u0010*\u001a<\u0010r\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u0010+*\u000201*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010F\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000b\u001a]\u0010s\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\b\b\u0001\u0010+*\u000201\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0014\u0010F\u001a\u0010\u0012\u0004\u0012\u00028\u0000\u0012\u0006\u0012\u0004\u0018\u00018\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bs\u00105\u001aW\u0010t\u001a\u00028\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+\"\u0010\b\u0002\u0010'*\n\u0012\u0006\b\u0000\u0012\u00028\u00010&*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010(\u001a\u00028\u00022\u0012\u0010F\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0086\bø\u0001\u0000¢\u0006\u0004\bt\u00105\u001a\"\u0010v\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000u0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001c\u0010w\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a6\u0010x\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010C*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000b\u001a\u001c\u0010z\u001a\b\u0012\u0004\u0012\u00028\u00000y\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a0\u0010{\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u0016\u0010|\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a0\u0010|\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a\u0016\u0010}\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a0\u0010}\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a^\u0010\u0081\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\"H\u0086\bø\u0001\u0000¢\u0006\u0006\b\u0081\u0001\u0010\u0082\u0001\u001at\u0010\u0084\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0083\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\b\u0084\u0001\u0010\u0085\u0001\u001a4\u0010\u0088\u0001\u001a\u00030\u0086\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010\u0087\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00010\u000bH\u0086\bø\u0001\u0000\u001aI\u0010\u0089\u0001\u001a\u00030\u0086\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010\u0087\u0001\u001a$\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00010\"H\u0086\bø\u0001\u0000\u001a\u001e\u0010\u008d\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\b\u008b\u0001\u0010\u008c\u0001\u001a\u001e\u0010\u008d\u0001\u001a\u00030\u008e\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\b\u008b\u0001\u0010\u008f\u0001\u001a,\u0010\u008d\u0001\u001a\u00028\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\b\u008b\u0001\u0010\u0090\u0001\u001aI\u0010\u0092\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u0091\u0001\u0010\u0013\u001aK\u0010\u0093\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u0093\u0001\u0010\u0013\u001a \u0010\u0094\u0001\u001a\u0005\u0018\u00010\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\b\u0094\u0001\u0010\u0095\u0001\u001a \u0010\u0094\u0001\u001a\u0005\u0018\u00010\u008e\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\b\u0094\u0001\u0010\u0096\u0001\u001a.\u0010\u0094\u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\b\u0094\u0001\u0010\u0090\u0001\u001a>\u0010\u0099\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010A\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000?j\n\u0012\u0006\b\u0000\u0012\u00028\u0000`@H\u0007¢\u0006\u0006\b\u0097\u0001\u0010\u0098\u0001\u001a@\u0010\u009a\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010A\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000?j\n\u0012\u0006\b\u0000\u0012\u00028\u0000`@H\u0007¢\u0006\u0006\b\u009a\u0001\u0010\u0098\u0001\u001a\u001e\u0010\u009c\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\b\u009b\u0001\u0010\u008c\u0001\u001a\u001e\u0010\u009c\u0001\u001a\u00030\u008e\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\b\u009b\u0001\u0010\u008f\u0001\u001a,\u0010\u009c\u0001\u001a\u00028\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\b\u009b\u0001\u0010\u0090\u0001\u001aI\u0010\u009e\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u009d\u0001\u0010\u0013\u001aK\u0010\u009f\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001\"\u000e\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u000109*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u000bH\u0087\bø\u0001\u0000¢\u0006\u0005\b\u009f\u0001\u0010\u0013\u001a \u0010 \u0001\u001a\u0005\u0018\u00010\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\b \u0001\u0010\u0095\u0001\u001a \u0010 \u0001\u001a\u0005\u0018\u00010\u008e\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\b \u0001\u0010\u0096\u0001\u001a.\u0010 \u0001\u001a\u0004\u0018\u00018\u0000\"\u000e\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u000009*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007¢\u0006\u0006\b \u0001\u0010\u0090\u0001\u001a>\u0010¢\u0001\u001a\u00028\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010A\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000?j\n\u0012\u0006\b\u0000\u0012\u00028\u0000`@H\u0007¢\u0006\u0006\b¡\u0001\u0010\u0098\u0001\u001a@\u0010£\u0001\u001a\u0004\u0018\u00018\u0000\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u001a\u0010A\u001a\u0016\u0012\u0006\b\u0000\u0012\u00028\u00000?j\n\u0012\u0006\b\u0000\u0012\u00028\u0000`@H\u0007¢\u0006\u0006\b£\u0001\u0010\u0098\u0001\u001a\u0017\u0010¤\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a1\u0010¤\u0001\u001a\u00020\u0004\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a5\u0010¥\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0014\u0010\u0087\u0001\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00010\u000bH\u0007\u001aJ\u0010¦\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022)\u0010\u0087\u0001\u001a$\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u0086\u00010\"H\u0007\u001a[\u0010¨\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\"H\u0086\bø\u0001\u0000¢\u0006\u0006\b¨\u0001\u0010©\u0001\u001aq\u0010ª\u0001\u001a\u00028\u0000\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0083\u0001H\u0086\bø\u0001\u0000¢\u0006\u0006\bª\u0001\u0010«\u0001\u001as\u0010¬\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0083\u0001H\u0087\bø\u0001\u0000¢\u0006\u0006\b¬\u0001\u0010«\u0001\u001a]\u0010\u00ad\u0001\u001a\u0004\u0018\u00018\u0000\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\"H\u0087\bø\u0001\u0000¢\u0006\u0006\b\u00ad\u0001\u0010©\u0001\u001a`\u0010®\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\"H\u0007¢\u0006\u0006\b®\u0001\u0010¯\u0001\u001av\u0010°\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0083\u0001H\u0007¢\u0006\u0006\b°\u0001\u0010±\u0001\u001aT\u0010²\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\"H\u0007\u001aj\u0010³\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0005\b\u0000\u0010§\u0001\"\b\b\u0001\u0010\u0001*\u00028\u0000*\b\u0012\u0004\u0012\u00028\u00010\u00022>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0000¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0001\u0012\u0004\u0012\u00028\u00000\u0083\u0001H\u0007\u001a`\u0010´\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012(\u0010\u0080\u0001\u001a#\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\"H\u0007¢\u0006\u0006\b´\u0001\u0010¯\u0001\u001av\u0010µ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010~\u001a\u00028\u00012>\u0010\u0080\u0001\u001a9\u0012\u0013\u0012\u00110\u0007¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\b\u0012\u0013\u0012\u00118\u0001¢\u0006\f\b#\u0012\b\b$\u0012\u0004\b\b(\u007f\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010\u0083\u0001H\u0007¢\u0006\u0006\bµ\u0001\u0010±\u0001\u001a1\u0010¶\u0001\u001a\u00020\u0007\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010;\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00070\u000bH\u0087\bø\u0001\u0000\u001a3\u0010·\u0001\u001a\u00030\u008a\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0013\u0010;\u001a\u000f\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030\u008a\u00010\u000bH\u0087\bø\u0001\u0000\u001a#\u0010¸\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\b\b\u0000\u0010\u0001*\u000201*\n\u0012\u0006\u0012\u0004\u0018\u00018\u00000\u0002\u001a.\u0010º\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010¹\u0001\u001a\u00020\u0007H\u0007\u001aH\u0010º\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010¹\u0001\u001a\u00020\u00072\u0018\u0010F\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u001a1\u0010»\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\b»\u0001\u0010¼\u0001\u001a;\u0010»\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010¾\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000½\u0001H\u0086\u0002¢\u0006\u0006\b»\u0001\u0010¿\u0001\u001a/\u0010»\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¾\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000_H\u0086\u0002\u001a/\u0010»\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¾\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u001aI\u0010À\u0001\u001a\u001a\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y0E\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0012\u0010\u0012\u001a\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00020\u00040\u000bH\u0086\bø\u0001\u0000\u001a1\u0010Á\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0006\u0010\u0003\u001a\u00028\u0000H\u0086\u0002¢\u0006\u0006\bÁ\u0001\u0010¼\u0001\u001a;\u0010Á\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0010\u0010¾\u0001\u001a\u000b\u0012\u0006\b\u0001\u0012\u00028\u00000½\u0001H\u0086\u0002¢\u0006\u0006\bÁ\u0001\u0010¿\u0001\u001a/\u0010Á\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¾\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000_H\u0086\u0002\u001a/\u0010Á\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010¾\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0086\u0002\u001aD\u0010Ä\u0001\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010¹\u0001\u001a\u00020\u00072\t\b\u0002\u0010Â\u0001\u001a\u00020\u00072\t\b\u0002\u0010Ã\u0001\u001a\u00020\u0004H\u0007\u001a^\u0010Ä\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010¹\u0001\u001a\u00020\u00072\t\b\u0002\u0010Â\u0001\u001a\u00020\u00072\t\b\u0002\u0010Ã\u0001\u001a\u00020\u00042\u0018\u0010F\u001a\u0014\u0012\n\u0012\b\u0012\u0004\u0012\u00028\u00000Y\u0012\u0004\u0012\u00028\u00010\u000bH\u0007\u001aA\u0010Æ\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00010E0\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002H\u0086\u0004\u001ar\u0010Æ\u0001\u001a\b\u0012\u0004\u0012\u00028\u00020\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+\"\u0004\b\u0002\u0010D*\b\u0012\u0004\u0012\u00028\u00000\u00022\r\u0010Å\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u000228\u0010F\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b#\u0012\t\b$\u0012\u0005\b\b(Ç\u0001\u0012\u0014\u0012\u00128\u0001¢\u0006\r\b#\u0012\t\b$\u0012\u0005\b\b(È\u0001\u0012\u0004\u0012\u00028\u00020\"\u001a+\u0010É\u0001\u001a\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00028\u0000\u0012\u0004\u0012\u00028\u00000E0\u0002\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002H\u0007\u001a_\u0010É\u0001\u001a\b\u0012\u0004\u0012\u00028\u00010\u0002\"\u0004\b\u0000\u0010\u0001\"\u0004\b\u0001\u0010+*\b\u0012\u0004\u0012\u00028\u00000\u000228\u0010F\u001a4\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b#\u0012\t\b$\u0012\u0005\b\b(Ç\u0001\u0012\u0014\u0012\u00128\u0000¢\u0006\r\b#\u0012\t\b$\u0012\u0005\b\b(È\u0001\u0012\u0004\u0012\u00028\u00010\"H\u0007\u001a\u008e\u0001\u0010Ô\u0001\u001a\u00028\u0001\"\u0004\b\u0000\u0010\u0001\"\u000f\b\u0001\u0010Ì\u0001*\b0Ê\u0001j\u0003`Ë\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\u0007\u0010Í\u0001\u001a\u00028\u00012\n\b\u0002\u0010Ï\u0001\u001a\u00030Î\u00012\n\b\u0002\u0010Ð\u0001\u001a\u00030Î\u00012\n\b\u0002\u0010Ñ\u0001\u001a\u00030Î\u00012\t\b\u0002\u0010Ò\u0001\u001a\u00020\u00072\n\b\u0002\u0010Ó\u0001\u001a\u00030Î\u00012\u0017\b\u0002\u0010F\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030Î\u0001\u0018\u00010\u000b¢\u0006\u0006\bÔ\u0001\u0010Õ\u0001\u001al\u0010×\u0001\u001a\u00030Ö\u0001\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u00022\n\b\u0002\u0010Ï\u0001\u001a\u00030Î\u00012\n\b\u0002\u0010Ð\u0001\u001a\u00030Î\u00012\n\b\u0002\u0010Ñ\u0001\u001a\u00030Î\u00012\t\b\u0002\u0010Ò\u0001\u001a\u00020\u00072\n\b\u0002\u0010Ó\u0001\u001a\u00030Î\u00012\u0017\b\u0002\u0010F\u001a\u0011\u0012\u0004\u0012\u00028\u0000\u0012\u0005\u0012\u00030Î\u0001\u0018\u00010\u000b\u001a\u001d\u0010Ø\u0001\u001a\b\u0012\u0004\u0012\u00028\u00000_\"\u0004\b\u0000\u0010\u0001*\b\u0012\u0004\u0012\u00028\u00000\u0002\u001a\u001e\u0010Û\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030Ù\u00010\u0002H\u0007¢\u0006\u0006\bÚ\u0001\u0010\u008c\u0001\u001a\u001e\u0010Û\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030Ü\u00010\u0002H\u0007¢\u0006\u0006\bÝ\u0001\u0010\u008c\u0001\u001a\u001d\u0010Û\u0001\u001a\u00030\u008a\u0001*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007¢\u0006\u0006\bÞ\u0001\u0010\u008c\u0001\u001a\u001e\u0010Û\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030ß\u00010\u0002H\u0007¢\u0006\u0006\bà\u0001\u0010\u008c\u0001\u001a\u001e\u0010Û\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\bá\u0001\u0010\u008c\u0001\u001a\u001e\u0010Û\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\bâ\u0001\u0010\u008c\u0001\u001a\u001d\u0010å\u0001\u001a\u00020\u0007*\t\u0012\u0005\u0012\u00030Ù\u00010\u0002H\u0007¢\u0006\u0006\bã\u0001\u0010ä\u0001\u001a\u001d\u0010å\u0001\u001a\u00020\u0007*\t\u0012\u0005\u0012\u00030Ü\u00010\u0002H\u0007¢\u0006\u0006\bæ\u0001\u0010ä\u0001\u001a\u001c\u0010å\u0001\u001a\u00020\u0007*\b\u0012\u0004\u0012\u00020\u00070\u0002H\u0007¢\u0006\u0006\bç\u0001\u0010ä\u0001\u001a\u001e\u0010å\u0001\u001a\u00030ß\u0001*\t\u0012\u0005\u0012\u00030ß\u00010\u0002H\u0007¢\u0006\u0006\bè\u0001\u0010é\u0001\u001a\u001e\u0010å\u0001\u001a\u00030\u008e\u0001*\t\u0012\u0005\u0012\u00030\u008e\u00010\u0002H\u0007¢\u0006\u0006\bê\u0001\u0010\u008f\u0001\u001a\u001e\u0010å\u0001\u001a\u00030\u008a\u0001*\t\u0012\u0005\u0012\u00030\u008a\u00010\u0002H\u0007¢\u0006\u0006\bë\u0001\u0010\u008c\u0001\u0082\u0002\u0007\n\u0005\b\u009920\u0001¨\u0006ì\u0001"}, d2 = {"Lkotlin/internal/OnlyInputTypes;", androidx.exifinterface.media.ExifInterface.GPS_DIRECTION_TRUE, "Lkotlin/sequences/Sequence;", "element", "", "contains", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Z", "", "index", "elementAt", "(Lkotlin/sequences/Sequence;I)Ljava/lang/Object;", "Lkotlin/Function1;", "defaultValue", "elementAtOrElse", "(Lkotlin/sequences/Sequence;ILkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "elementAtOrNull", "first", "(Lkotlin/sequences/Sequence;)Ljava/lang/Object;", "predicate", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;", "firstOrNull", "indexOf", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)I", "indexOfFirst", "indexOfLast", "last", "lastIndexOf", "lastOrNull", "single", "singleOrNull", com.baidu.mobads.sdk.api.IAdInterListener.AdReqParam.AD_COUNT, "drop", "dropWhile", "filter", "Lkotlin/Function2;", "Lkotlin/ParameterName;", "name", "filterIndexed", "", "C", "destination", "filterIndexedTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function2;)Ljava/util/Collection;", "R", "Lkotlin/internal/NoInfer;", "filterIsInstance", "filterIsInstanceTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;)Ljava/util/Collection;", "filterNot", "", "filterNotNull", "filterNotNullTo", "filterNotTo", "(Lkotlin/sequences/Sequence;Ljava/util/Collection;Lkotlin/jvm/functions/Function1;)Ljava/util/Collection;", "filterTo", "take", "takeWhile", "", "sorted", "selector", "sortedBy", "sortedByDescending", "sortedDescending", "Ljava/util/Comparator;", "Lkotlin/Comparator;", "comparator", "sortedWith", "K", androidx.exifinterface.media.ExifInterface.GPS_MEASUREMENT_INTERRUPTED, "Lkotlin/Pair;", "transform", "", "associate", "keySelector", "associateBy", "valueTransform", "", "M", "associateByTo", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "(Lkotlin/sequences/Sequence;Ljava/util/Map;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Ljava/util/Map;", "associateTo", "valueSelector", "associateWith", "associateWithTo", "toCollection", "Ljava/util/HashSet;", "Lkotlin/collections/HashSet;", "toHashSet", "", "toList", "", "toMutableList", "", "toSet", "", "flatMapIterable", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function1;)Lkotlin/sequences/Sequence;", "flatMap", "flatMapIndexedIterable", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "flatMapIndexed", "flatMapIndexedSequence", "flatMapIterableTo", "flatMapTo", "groupBy", "groupByTo", "Lkotlin/collections/Grouping;", "groupingBy", "map", "mapIndexed", "mapIndexedNotNull", "mapIndexedNotNullTo", "mapIndexedTo", "mapNotNull", "mapNotNullTo", "mapTo", "Lkotlin/collections/IndexedValue;", "withIndex", "distinct", "distinctBy", "", "toMutableSet", "all", org.apache.commons.codec.language.bm.Languages.ANY, me.leolin.shortcutbadger.impl.NewHtcHomeBadger.COUNT, "initial", "acc", "operation", "fold", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "Lkotlin/Function3;", "foldIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "", "action", "forEach", "forEachIndexed", "", "maxOrThrow", "(Lkotlin/sequences/Sequence;)D", org.apache.tools.ant.types.selectors.DepthSelector.MAX_KEY, "", "(Lkotlin/sequences/Sequence;)F", "(Lkotlin/sequences/Sequence;)Ljava/lang/Comparable;", "maxByOrThrow", "maxBy", "maxByOrNull", "maxOrNull", "(Lkotlin/sequences/Sequence;)Ljava/lang/Double;", "(Lkotlin/sequences/Sequence;)Ljava/lang/Float;", "maxWithOrThrow", "(Lkotlin/sequences/Sequence;Ljava/util/Comparator;)Ljava/lang/Object;", "maxWith", "maxWithOrNull", "minOrThrow", org.apache.tools.ant.types.selectors.DepthSelector.MIN_KEY, "minByOrThrow", "minBy", "minByOrNull", "minOrNull", "minWithOrThrow", "minWith", "minWithOrNull", "none", "onEach", "onEachIndexed", androidx.exifinterface.media.ExifInterface.LATITUDE_SOUTH, "reduce", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;", "reduceIndexed", "(Lkotlin/sequences/Sequence;Lkotlin/jvm/functions/Function3;)Ljava/lang/Object;", "reduceIndexedOrNull", "reduceOrNull", "runningFold", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Lkotlin/sequences/Sequence;", "runningFoldIndexed", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Lkotlin/sequences/Sequence;", "runningReduce", "runningReduceIndexed", "scan", "scanIndexed", "sumBy", "sumByDouble", "requireNoNulls", com.anythink.core.api.ATAdConst.NETWORK_REQUEST_PARAMS_KEY.BANNER_SIZE, com.ss.android.socialbase.downloader.utils.DownloadUtils.VALUE_CHUNKED, "minus", "(Lkotlin/sequences/Sequence;Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "", "elements", "(Lkotlin/sequences/Sequence;[Ljava/lang/Object;)Lkotlin/sequences/Sequence;", "partition", "plus", "step", "partialWindows", "windowed", "other", "zip", "a", "b", "zipWithNext", "Ljava/lang/Appendable;", "Lkotlin/text/Appendable;", androidx.exifinterface.media.ExifInterface.GPS_MEASUREMENT_IN_PROGRESS, "buffer", "", "separator", com.alibaba.sdk.android.oss.common.RequestParameters.PREFIX, "postfix", "limit", "truncated", "joinTo", "(Lkotlin/sequences/Sequence;Ljava/lang/Appendable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;)Ljava/lang/Appendable;", "", "joinToString", "asIterable", "", "averageOfByte", "average", "", "averageOfShort", "averageOfInt", "", "averageOfLong", "averageOfFloat", "averageOfDouble", "sumOfByte", "(Lkotlin/sequences/Sequence;)I", "sum", "sumOfShort", "sumOfInt", "sumOfLong", "(Lkotlin/sequences/Sequence;)J", "sumOfFloat", "sumOfDouble", "kotlin-stdlib"}, k = 5, mv = {1, 7, 1}, xs = "kotlin/sequences/SequencesKt")
/* loaded from: classes14.dex */
public class SequencesKt___SequencesKt extends kotlin.sequences.SequencesKt___SequencesJvmKt {
    public static final <T> boolean all(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (!predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    public static final <T> boolean any(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return sequence.iterator().hasNext();
    }

    public static final <T> boolean any(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return true;
            }
        }
        return false;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.lang.Iterable<T> asIterable(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return new kotlin.sequences.SequencesKt___SequencesKt$asIterable$$inlined$Iterable$1(sequence);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, V> associate(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.Pair<? extends K, ? extends V>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            kotlin.Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            linkedHashMap.put(invoke.getFirst(), invoke.getSecond());
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.Map<K, T> associateBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : sequence) {
            linkedHashMap.put(keySelector.invoke(t), t);
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, V> associateBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : sequence) {
            linkedHashMap.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, M extends java.util.Map<? super K, ? super T>> M associateByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (T t : sequence) {
            destination.put(keySelector.invoke(t), t);
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, ? super V>> M associateByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (T t : sequence) {
            destination.put(keySelector.invoke(t), valueTransform.invoke(t));
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, ? super V>> M associateTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.Pair<? extends K, ? extends V>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            kotlin.Pair<? extends K, ? extends V> invoke = transform.invoke(it.next());
            destination.put(invoke.getFirst(), invoke.getSecond());
        }
        return destination;
    }

    @kotlin.SinceKotlin(version = "1.3")
    @org.jetbrains.annotations.NotNull
    public static final <K, V> java.util.Map<K, V> associateWith(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends K> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super K, ? extends V> valueSelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (K k : sequence) {
            linkedHashMap.put(k, valueSelector.invoke(k));
        }
        return linkedHashMap;
    }

    @kotlin.SinceKotlin(version = "1.3")
    @org.jetbrains.annotations.NotNull
    public static final <K, V, M extends java.util.Map<? super K, ? super V>> M associateWithTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends K> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super K, ? extends V> valueSelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueSelector, "valueSelector");
        for (K k : sequence) {
            destination.put(k, valueSelector.invoke(k));
        }
        return destination;
    }

    @kotlin.jvm.JvmName(name = "averageOfByte")
    public static final double averageOfByte(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Byte> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Byte> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().byteValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfDouble")
    public static final double averageOfDouble(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().doubleValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfFloat")
    public static final double averageOfFloat(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().floatValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfInt")
    public static final double averageOfInt(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Integer> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Integer> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().intValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfLong")
    public static final double averageOfLong(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Long> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Long> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().longValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.jvm.JvmName(name = "averageOfShort")
    public static final double averageOfShort(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Short> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Short> it = sequence.iterator();
        double d = 0.0d;
        int i = 0;
        while (it.hasNext()) {
            d += it.next().shortValue();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        if (i == 0) {
            return Double.NaN;
        }
        return d / i;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<java.util.List<T>> chunked(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return windowed(sequence, i, i, true);
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> chunked(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.util.List<? extends T>, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return windowed(sequence, i, i, true, transform);
    }

    public static final <T> boolean contains(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return indexOf(sequence, t) >= 0;
    }

    public static <T> int count(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            it.next();
            i++;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    public static final <T> int count(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.Iterator<? extends T> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue() && (i = i + 1) < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwCountOverflow();
            }
        }
        return i;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> distinct(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return distinctBy(sequence, kotlin.sequences.SequencesKt___SequencesKt$distinct$1.INSTANCE);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> kotlin.sequences.Sequence<T> distinctBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        return new kotlin.sequences.DistinctSequence(sequence, selector);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> drop(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        if (i >= 0) {
            return i == 0 ? sequence : sequence instanceof kotlin.sequences.DropTakeSequence ? ((kotlin.sequences.DropTakeSequence) sequence).drop(i) : new kotlin.sequences.DropSequence(sequence, i);
        }
        throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> dropWhile(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new kotlin.sequences.DropWhileSequence(sequence, predicate);
    }

    public static final <T> T elementAt(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return (T) elementAtOrElse(sequence, i, new kotlin.sequences.SequencesKt___SequencesKt$elementAt$1(i));
    }

    public static final <T> T elementAtOrElse(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends T> defaultValue) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(defaultValue, "defaultValue");
        if (i < 0) {
            return defaultValue.invoke(java.lang.Integer.valueOf(i));
        }
        int i2 = 0;
        for (T t : sequence) {
            int i3 = i2 + 1;
            if (i == i2) {
                return t;
            }
            i2 = i3;
        }
        return defaultValue.invoke(java.lang.Integer.valueOf(i));
    }

    @org.jetbrains.annotations.Nullable
    public static final <T> T elementAtOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        if (i < 0) {
            return null;
        }
        int i2 = 0;
        for (T t : sequence) {
            int i3 = i2 + 1;
            if (i == i2) {
                return t;
            }
            i2 = i3;
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> kotlin.sequences.Sequence<T> filter(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new kotlin.sequences.FilteringSequence(sequence, true, predicate);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> filterIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new kotlin.sequences.TransformingSequence(new kotlin.sequences.FilteringSequence(new kotlin.sequences.IndexingSequence(sequence), true, new kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1(predicate)), kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2.INSTANCE);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterIndexedTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = 0;
        for (T t : sequence) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.mo5invoke(java.lang.Integer.valueOf(i), t).booleanValue()) {
                destination.add(t);
            }
            i = i2;
        }
        return destination;
    }

    public static final /* synthetic */ <R> kotlin.sequences.Sequence<R> filterIsInstance(kotlin.sequences.Sequence<?> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.needClassReification();
        kotlin.sequences.Sequence<R> filter = filter(sequence, kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1.INSTANCE);
        kotlin.jvm.internal.Intrinsics.checkNotNull(filter, "null cannot be cast to non-null type kotlin.sequences.Sequence<R of kotlin.sequences.SequencesKt___SequencesKt.filterIsInstance>");
        return filter;
    }

    public static final /* synthetic */ <R, C extends java.util.Collection<? super R>> C filterIsInstanceTo(kotlin.sequences.Sequence<?> sequence, C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        for (java.lang.Object obj : sequence) {
            kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(3, "R");
            if (obj instanceof java.lang.Object) {
                destination.add(obj);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> filterNot(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new kotlin.sequences.FilteringSequence(sequence, false, predicate);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> filterNotNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.sequences.Sequence<T> filterNot = filterNot(sequence, kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1.INSTANCE);
        kotlin.jvm.internal.Intrinsics.checkNotNull(filterNot, "null cannot be cast to non-null type kotlin.sequences.Sequence<T of kotlin.sequences.SequencesKt___SequencesKt.filterNotNull>");
        return filterNot;
    }

    @org.jetbrains.annotations.NotNull
    public static final <C extends java.util.Collection<? super T>, T> C filterNotNullTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        for (T t : sequence) {
            if (t != null) {
                destination.add(t);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterNotTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : sequence) {
            if (!predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C filterTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : sequence) {
            if (predicate.invoke(t).booleanValue()) {
                destination.add(t);
            }
        }
        return destination;
    }

    public static <T> T first(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        throw new java.util.NoSuchElementException("Sequence is empty.");
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    public static final <T> T first(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : sequence) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        throw new java.util.NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @org.jetbrains.annotations.Nullable
    public static <T> T firstOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return null;
    }

    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T firstOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        for (T t : sequence) {
            if (predicate.invoke(t).booleanValue()) {
                return t;
            }
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> flatMap(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.sequences.Sequence<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return new kotlin.sequences.FlatteningSequence(sequence, transform, kotlin.sequences.SequencesKt___SequencesKt$flatMap$2.INSTANCE);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapIndexedIterable")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R> kotlin.sequences.Sequence<R> flatMapIndexedIterable(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends java.lang.Iterable<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return kotlin.sequences.SequencesKt__SequencesKt.flatMapIndexed(sequence, transform, kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$1.INSTANCE);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapIndexedSequence")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R> kotlin.sequences.Sequence<R> flatMapIndexedSequence(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends kotlin.sequences.Sequence<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return kotlin.sequences.SequencesKt__SequencesKt.flatMapIndexed(sequence, transform, kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$2.INSTANCE);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapIterable")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R> kotlin.sequences.Sequence<R> flatMapIterable(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends java.lang.Iterable<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return new kotlin.sequences.FlatteningSequence(sequence, transform, kotlin.sequences.SequencesKt___SequencesKt$flatMap$1.INSTANCE);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.jvm.JvmName(name = "flatMapIterableTo")
    @org.jetbrains.annotations.NotNull
    @kotlin.OverloadResolutionByLambdaReturnType
    public static final <T, R, C extends java.util.Collection<? super R>> C flatMapIterableTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends java.lang.Iterable<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(destination, transform.invoke(it.next()));
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C flatMapTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends kotlin.sequences.Sequence<? extends R>> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(destination, transform.invoke(it.next()));
        }
        return destination;
    }

    public static final <T, R> R fold(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            r = operation.mo5invoke(r, it.next());
        }
        return r;
    }

    public static final <T, R> R foldIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        int i = 0;
        for (T t : sequence) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            r = operation.invoke(java.lang.Integer.valueOf(i), r, t);
            i = i2;
        }
        return r;
    }

    public static final <T> void forEach(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            action.invoke(it.next());
        }
    }

    public static final <T> void forEachIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        int i = 0;
        for (T t : sequence) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            action.mo5invoke(java.lang.Integer.valueOf(i), t);
            i = i2;
        }
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K> java.util.Map<K, java.util.List<T>> groupBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : sequence) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = linkedHashMap.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                linkedHashMap.put(invoke, obj);
            }
            ((java.util.List) obj).add(t);
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, V> java.util.Map<K, java.util.List<V>> groupBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        java.util.LinkedHashMap linkedHashMap = new java.util.LinkedHashMap();
        for (T t : sequence) {
            K invoke = keySelector.invoke(t);
            java.util.List<V> list = linkedHashMap.get(invoke);
            if (list == null) {
                list = new java.util.ArrayList<>();
                linkedHashMap.put(invoke, list);
            }
            list.add(valueTransform.invoke(t));
        }
        return linkedHashMap;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, K, M extends java.util.Map<? super K, java.util.List<T>>> M groupByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        for (T t : sequence) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                destination.put(invoke, obj);
            }
            ((java.util.List) obj).add(t);
        }
        return destination;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T, K, V, M extends java.util.Map<? super K, java.util.List<V>>> M groupByTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull M destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends V> valueTransform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(valueTransform, "valueTransform");
        for (T t : sequence) {
            K invoke = keySelector.invoke(t);
            java.lang.Object obj = destination.get(invoke);
            if (obj == null) {
                obj = new java.util.ArrayList();
                destination.put(invoke, obj);
            }
            ((java.util.List) obj).add(valueTransform.invoke(t));
        }
        return destination;
    }

    @kotlin.SinceKotlin(version = "1.1")
    @org.jetbrains.annotations.NotNull
    public static final <T, K> kotlin.collections.Grouping<T, K> groupingBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends K> keySelector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(keySelector, "keySelector");
        return new kotlin.sequences.SequencesKt___SequencesKt$groupingBy$1(sequence, keySelector);
    }

    public static final <T> int indexOf(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        int i = 0;
        for (T t2 : sequence) {
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (kotlin.jvm.internal.Intrinsics.areEqual(t, t2)) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int indexOfFirst(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = 0;
        for (T t : sequence) {
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public static final <T> int indexOfLast(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        int i = -1;
        int i2 = 0;
        for (T t : sequence) {
            if (i2 < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (predicate.invoke(t).booleanValue()) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, A extends java.lang.Appendable> A joinTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull A buffer, @org.jetbrains.annotations.NotNull java.lang.CharSequence separator, @org.jetbrains.annotations.NotNull java.lang.CharSequence prefix, @org.jetbrains.annotations.NotNull java.lang.CharSequence postfix, int i, @org.jetbrains.annotations.NotNull java.lang.CharSequence truncated, @org.jetbrains.annotations.Nullable kotlin.jvm.functions.Function1<? super T, ? extends java.lang.CharSequence> function1) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(buffer, "buffer");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(separator, "separator");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(prefix, "prefix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(postfix, "postfix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(truncated, "truncated");
        buffer.append(prefix);
        int i2 = 0;
        for (T t : sequence) {
            i2++;
            if (i2 > 1) {
                buffer.append(separator);
            }
            if (i >= 0 && i2 > i) {
                break;
            }
            kotlin.text.StringsKt__AppendableKt.appendElement(buffer, t, function1);
        }
        if (i >= 0 && i2 > i) {
            buffer.append(truncated);
        }
        buffer.append(postfix);
        return buffer;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.lang.String joinToString(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.lang.CharSequence separator, @org.jetbrains.annotations.NotNull java.lang.CharSequence prefix, @org.jetbrains.annotations.NotNull java.lang.CharSequence postfix, int i, @org.jetbrains.annotations.NotNull java.lang.CharSequence truncated, @org.jetbrains.annotations.Nullable kotlin.jvm.functions.Function1<? super T, ? extends java.lang.CharSequence> function1) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(separator, "separator");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(prefix, "prefix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(postfix, "postfix");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(truncated, "truncated");
        java.lang.String sb = ((java.lang.StringBuilder) joinTo(sequence, new java.lang.StringBuilder(), separator, prefix, postfix, i, truncated, function1)).toString();
        kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(sb, "joinTo(StringBuilder(), …ed, transform).toString()");
        return sb;
    }

    public static /* synthetic */ java.lang.String joinToString$default(kotlin.sequences.Sequence sequence, java.lang.CharSequence charSequence, java.lang.CharSequence charSequence2, java.lang.CharSequence charSequence3, int i, java.lang.CharSequence charSequence4, kotlin.jvm.functions.Function1 function1, int i2, java.lang.Object obj) {
        if ((i2 & 1) != 0) {
            charSequence = ", ";
        }
        java.lang.CharSequence charSequence5 = (i2 & 2) != 0 ? "" : charSequence2;
        java.lang.CharSequence charSequence6 = (i2 & 4) == 0 ? charSequence3 : "";
        int i3 = (i2 & 8) != 0 ? -1 : i;
        if ((i2 & 16) != 0) {
            charSequence4 = "...";
        }
        java.lang.CharSequence charSequence7 = charSequence4;
        if ((i2 & 32) != 0) {
            function1 = null;
        }
        return joinToString(sequence, charSequence, charSequence5, charSequence6, i3, charSequence7, function1);
    }

    public static <T> T last(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException("Sequence is empty.");
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T last(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : sequence) {
            if (predicate.invoke(t2).booleanValue()) {
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        throw new java.util.NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    public static final <T> int lastIndexOf(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        int i = -1;
        int i2 = 0;
        for (T t2 : sequence) {
            if (i2 < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            if (kotlin.jvm.internal.Intrinsics.areEqual(t, t2)) {
                i = i2;
            }
            i2++;
        }
        return i;
    }

    @org.jetbrains.annotations.Nullable
    public static final <T> T lastOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            next = it.next();
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r1v1, types: [java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T lastOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        for (T t2 : sequence) {
            if (predicate.invoke(t2).booleanValue()) {
                t = t2;
            }
        }
        return t;
    }

    @org.jetbrains.annotations.NotNull
    public static <T, R> kotlin.sequences.Sequence<R> map(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return new kotlin.sequences.TransformingSequence(sequence, transform);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> mapIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return new kotlin.sequences.TransformingIndexedSequence(sequence, transform);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> mapIndexedNotNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return filterNotNull(new kotlin.sequences.TransformingIndexedSequence(sequence, transform));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapIndexedNotNullTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        int i = 0;
        for (T t : sequence) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            R mo5invoke = transform.mo5invoke(java.lang.Integer.valueOf(i), t);
            if (mo5invoke != null) {
                destination.add(mo5invoke);
            }
            i = i2;
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapIndexedTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        int i = 0;
        for (T t : sequence) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            destination.add(transform.mo5invoke(java.lang.Integer.valueOf(i), t));
            i = i2;
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> mapNotNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return filterNotNull(new kotlin.sequences.TransformingSequence(sequence, transform));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapNotNullTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            R invoke = transform.invoke(it.next());
            if (invoke != null) {
                destination.add(invoke);
            }
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, C extends java.util.Collection<? super R>> C mapTo(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            destination.add(transform.invoke(it.next()));
        }
        return destination;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T, R extends java.lang.Comparable<? super R>> T maxByOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) < 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxByOrThrow")
    public static final <T, R extends java.lang.Comparable<? super R>> T maxByOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) < 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T extends java.lang.Comparable<? super T>> T maxOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: maxOrNull, reason: collision with other method in class */
    public static final java.lang.Double m613maxOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.max(doubleValue, it.next().doubleValue());
        }
        return java.lang.Double.valueOf(doubleValue);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: maxOrNull, reason: collision with other method in class */
    public static final java.lang.Float m614maxOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.max(floatValue, it.next().floatValue());
        }
        return java.lang.Float.valueOf(floatValue);
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    public static final double maxOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.max(doubleValue, it.next().doubleValue());
        }
        return doubleValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    /* renamed from: maxOrThrow, reason: collision with other method in class */
    public static final float m615maxOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.max(floatValue, it.next().floatValue());
        }
        return floatValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxOrThrow")
    @org.jetbrains.annotations.NotNull
    /* renamed from: maxOrThrow, reason: collision with other method in class */
    public static final <T extends java.lang.Comparable<? super T>> T m616maxOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) < 0) {
                next = next2;
            }
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T> T maxWithOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "maxWithOrThrow")
    public static final <T> T maxWithOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) < 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T, R extends java.lang.Comparable<? super R>> T minByOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) > 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    /* JADX WARN: Type inference failed for: r0v10 */
    /* JADX WARN: Type inference failed for: r0v11 */
    /* JADX WARN: Type inference failed for: r0v3, types: [T, java.lang.Object] */
    /* JADX WARN: Type inference failed for: r0v4 */
    /* JADX WARN: Type inference failed for: r0v5, types: [T] */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minByOrThrow")
    public static final <T, R extends java.lang.Comparable<? super R>> T minByOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        if (!it.hasNext()) {
            return next;
        }
        R invoke = selector.invoke(next);
        do {
            T next2 = it.next();
            R invoke2 = selector.invoke(next2);
            next = next;
            if (invoke.compareTo(invoke2) > 0) {
                invoke = invoke2;
                next = next2;
            }
        } while (it.hasNext());
        return (T) next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T extends java.lang.Comparable<? super T>> T minOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: minOrNull, reason: collision with other method in class */
    public static final java.lang.Double m617minOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.min(doubleValue, it.next().doubleValue());
        }
        return java.lang.Double.valueOf(doubleValue);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    /* renamed from: minOrNull, reason: collision with other method in class */
    public static final java.lang.Float m618minOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.min(floatValue, it.next().floatValue());
        }
        return java.lang.Float.valueOf(floatValue);
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    public static final double minOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        double doubleValue = it.next().doubleValue();
        while (it.hasNext()) {
            doubleValue = java.lang.Math.min(doubleValue, it.next().doubleValue());
        }
        return doubleValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    /* renamed from: minOrThrow, reason: collision with other method in class */
    public static final float m619minOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        float floatValue = it.next().floatValue();
        while (it.hasNext()) {
            floatValue = java.lang.Math.min(floatValue, it.next().floatValue());
        }
        return floatValue;
    }

    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minOrThrow")
    @org.jetbrains.annotations.NotNull
    /* renamed from: minOrThrow, reason: collision with other method in class */
    public static final <T extends java.lang.Comparable<? super T>> T m620minOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        T next = it.next();
        while (it.hasNext()) {
            T next2 = it.next();
            if (next.compareTo(next2) > 0) {
                next = next2;
            }
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <T> T minWithOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @kotlin.SinceKotlin(version = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_7)
    @kotlin.jvm.JvmName(name = "minWithOrThrow")
    public static final <T> T minWithOrThrow(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException();
        }
        java.lang.Object obj = (T) it.next();
        while (it.hasNext()) {
            java.lang.Object obj2 = (T) it.next();
            if (comparator.compare(obj, obj2) > 0) {
                obj = (T) obj2;
            }
        }
        return (T) obj;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> minus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return new kotlin.sequences.SequencesKt___SequencesKt$minus$3(elements, sequence);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> minus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return new kotlin.sequences.SequencesKt___SequencesKt$minus$1(sequence, t);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> minus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return new kotlin.sequences.SequencesKt___SequencesKt$minus$4(elements, sequence);
    }

    /* JADX WARN: Multi-variable type inference failed */
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> minus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull T[] elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return elements.length == 0 ? sequence : new kotlin.sequences.SequencesKt___SequencesKt$minus$2(elements, sequence);
    }

    public static final <T> boolean none(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return !sequence.iterator().hasNext();
    }

    public static final <T> boolean none(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            if (predicate.invoke(it.next()).booleanValue()) {
                return false;
            }
        }
        return true;
    }

    @kotlin.SinceKotlin(version = "1.1")
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> onEach(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        return map(sequence, new kotlin.sequences.SequencesKt___SequencesKt$onEach$1(action));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> onEachIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super java.lang.Integer, ? super T, kotlin.Unit> action) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(action, "action");
        return mapIndexed(sequence, new kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1(action));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.Pair<java.util.List<T>, java.util.List<T>> partition(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        java.util.ArrayList arrayList = new java.util.ArrayList();
        java.util.ArrayList arrayList2 = new java.util.ArrayList();
        for (T t : sequence) {
            if (predicate.invoke(t).booleanValue()) {
                arrayList.add(t);
            } else {
                arrayList2.add(t);
            }
        }
        return new kotlin.Pair<>(arrayList, arrayList2);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> plus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.lang.Iterable<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return kotlin.sequences.SequencesKt__SequencesKt.flatten(kotlin.sequences.SequencesKt__SequencesKt.sequenceOf(sequence, kotlin.collections.CollectionsKt___CollectionsKt.asSequence(elements)));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> plus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, T t) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return kotlin.sequences.SequencesKt__SequencesKt.flatten(kotlin.sequences.SequencesKt__SequencesKt.sequenceOf(sequence, kotlin.sequences.SequencesKt__SequencesKt.sequenceOf(t)));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> plus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return kotlin.sequences.SequencesKt__SequencesKt.flatten(kotlin.sequences.SequencesKt__SequencesKt.sequenceOf(sequence, elements));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> plus(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull T[] elements) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(elements, "elements");
        return plus((kotlin.sequences.Sequence) sequence, (java.lang.Iterable) kotlin.collections.ArraysKt___ArraysJvmKt.asList(elements));
    }

    public static final <S, T extends S> S reduce(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.lang.UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.mo5invoke(next, it.next());
        }
        return next;
    }

    public static final <S, T extends S> S reduceIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.lang.UnsupportedOperationException("Empty sequence can't be reduced.");
        }
        S next = it.next();
        int i = 1;
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            next = operation.invoke(java.lang.Integer.valueOf(i), next, it.next());
            i = i2;
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceIndexedOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        int i = 1;
        while (it.hasNext()) {
            int i2 = i + 1;
            if (i < 0) {
                kotlin.collections.CollectionsKt__CollectionsKt.throwIndexOverflow();
            }
            next = operation.invoke(java.lang.Integer.valueOf(i), next, it.next());
            i = i2;
        }
        return next;
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.Nullable
    public static final <S, T extends S> S reduceOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        S next = it.next();
        while (it.hasNext()) {
            next = operation.mo5invoke(next, it.next());
        }
        return next;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> requireNoNulls(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return map(sequence, new kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1(sequence));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> runningFold(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return kotlin.sequences.SequencesKt__SequenceBuilderKt.sequence(new kotlin.sequences.SequencesKt___SequencesKt$runningFold$1(r, sequence, operation, null));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> runningFoldIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return kotlin.sequences.SequencesKt__SequenceBuilderKt.sequence(new kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1(r, sequence, operation, null));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <S, T extends S> kotlin.sequences.Sequence<S> runningReduce(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return kotlin.sequences.SequencesKt__SequenceBuilderKt.sequence(new kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1(sequence, operation, null));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @org.jetbrains.annotations.NotNull
    public static final <S, T extends S> kotlin.sequences.Sequence<S> runningReduceIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super S, ? super T, ? extends S> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return kotlin.sequences.SequencesKt__SequenceBuilderKt.sequence(new kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1(sequence, operation, null));
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> scan(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return runningFold(sequence, r, operation);
    }

    @kotlin.SinceKotlin(version = "1.4")
    @kotlin.WasExperimental(markerClass = {kotlin.ExperimentalStdlibApi.class})
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> scanIndexed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, R r, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function3<? super java.lang.Integer, ? super R, ? super T, ? extends R> operation) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(operation, "operation");
        return runningFoldIndexed(sequence, r, operation);
    }

    public static final <T> T single(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            throw new java.util.NoSuchElementException("Sequence is empty.");
        }
        T next = it.next();
        if (it.hasNext()) {
            throw new java.lang.IllegalArgumentException("Sequence has more than one element.");
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v1, types: [java.lang.Object] */
    public static final <T> T single(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        T t = null;
        boolean z = false;
        for (T t2 : sequence) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    throw new java.lang.IllegalArgumentException("Sequence contains more than one matching element.");
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        throw new java.util.NoSuchElementException("Sequence contains no element matching the predicate.");
    }

    @org.jetbrains.annotations.Nullable
    public static final <T> T singleOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<? extends T> it = sequence.iterator();
        if (!it.hasNext()) {
            return null;
        }
        T next = it.next();
        if (it.hasNext()) {
            return null;
        }
        return next;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r3v1, types: [java.lang.Object] */
    @org.jetbrains.annotations.Nullable
    public static final <T> T singleOrNull(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        boolean z = false;
        T t = null;
        for (T t2 : sequence) {
            if (predicate.invoke(t2).booleanValue()) {
                if (z) {
                    return null;
                }
                z = true;
                t = t2;
            }
        }
        if (z) {
            return t;
        }
        return null;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T extends java.lang.Comparable<? super T>> kotlin.sequences.Sequence<T> sorted(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return new kotlin.sequences.SequencesKt___SequencesKt$sorted$1(sequence);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R extends java.lang.Comparable<? super R>> kotlin.sequences.Sequence<T> sortedBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        return sortedWith(sequence, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2(selector));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R extends java.lang.Comparable<? super R>> kotlin.sequences.Sequence<T> sortedByDescending(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, ? extends R> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        return sortedWith(sequence, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1(selector));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T extends java.lang.Comparable<? super T>> kotlin.sequences.Sequence<T> sortedDescending(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        java.util.Comparator reverseOrder;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        reverseOrder = kotlin.comparisons.ComparisonsKt__ComparisonsKt.reverseOrder();
        return sortedWith(sequence, reverseOrder);
    }

    @org.jetbrains.annotations.NotNull
    public static <T> kotlin.sequences.Sequence<T> sortedWith(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull java.util.Comparator<? super T> comparator) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(comparator, "comparator");
        return new kotlin.sequences.SequencesKt___SequencesKt$sortedWith$1(sequence, comparator);
    }

    @kotlin.Deprecated(message = "Use sumOf instead.", replaceWith = @kotlin.ReplaceWith(expression = "this.sumOf(selector)", imports = {}))
    @kotlin.DeprecatedSinceKotlin(warningSince = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_5)
    public static final <T> int sumBy(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Integer> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += selector.invoke(it.next()).intValue();
        }
        return i;
    }

    @kotlin.Deprecated(message = "Use sumOf instead.", replaceWith = @kotlin.ReplaceWith(expression = "this.sumOf(selector)", imports = {}))
    @kotlin.DeprecatedSinceKotlin(warningSince = org.apache.tools.ant.util.JavaEnvUtils.JAVA_1_5)
    public static final <T> double sumByDouble(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Double> selector) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(selector, "selector");
        java.util.Iterator<? extends T> it = sequence.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += selector.invoke(it.next()).doubleValue();
        }
        return d;
    }

    @kotlin.jvm.JvmName(name = "sumOfByte")
    public static final int sumOfByte(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Byte> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Byte> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().byteValue();
        }
        return i;
    }

    @kotlin.jvm.JvmName(name = "sumOfDouble")
    public static final double sumOfDouble(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Double> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Double> it = sequence.iterator();
        double d = 0.0d;
        while (it.hasNext()) {
            d += it.next().doubleValue();
        }
        return d;
    }

    @kotlin.jvm.JvmName(name = "sumOfFloat")
    public static final float sumOfFloat(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Float> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Float> it = sequence.iterator();
        float f = 0.0f;
        while (it.hasNext()) {
            f += it.next().floatValue();
        }
        return f;
    }

    @kotlin.jvm.JvmName(name = "sumOfInt")
    public static final int sumOfInt(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Integer> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Integer> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().intValue();
        }
        return i;
    }

    @kotlin.jvm.JvmName(name = "sumOfLong")
    public static final long sumOfLong(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Long> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Long> it = sequence.iterator();
        long j = 0;
        while (it.hasNext()) {
            j += it.next().longValue();
        }
        return j;
    }

    @kotlin.jvm.JvmName(name = "sumOfShort")
    public static final int sumOfShort(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<java.lang.Short> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.Iterator<java.lang.Short> it = sequence.iterator();
        int i = 0;
        while (it.hasNext()) {
            i += it.next().shortValue();
        }
        return i;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> take(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        if (i >= 0) {
            return i == 0 ? kotlin.sequences.SequencesKt__SequencesKt.emptySequence() : sequence instanceof kotlin.sequences.DropTakeSequence ? ((kotlin.sequences.DropTakeSequence) sequence).take(i) : new kotlin.sequences.TakeSequence(sequence, i);
        }
        throw new java.lang.IllegalArgumentException(("Requested element count " + i + " is less than zero.").toString());
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<T> takeWhile(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super T, java.lang.Boolean> predicate) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(predicate, "predicate");
        return new kotlin.sequences.TakeWhileSequence(sequence, predicate);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, C extends java.util.Collection<? super T>> C toCollection(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull C destination) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(destination, "destination");
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            destination.add(it.next());
        }
        return destination;
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.HashSet<T> toHashSet(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return (java.util.HashSet) toCollection(sequence, new java.util.HashSet());
    }

    @org.jetbrains.annotations.NotNull
    public static <T> java.util.List<T> toList(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return kotlin.collections.CollectionsKt__CollectionsKt.optimizeReadOnlyList(toMutableList(sequence));
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.List<T> toMutableList(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return (java.util.List) toCollection(sequence, new java.util.ArrayList());
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> toMutableSet(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        java.util.LinkedHashSet linkedHashSet = new java.util.LinkedHashSet();
        java.util.Iterator<? extends T> it = sequence.iterator();
        while (it.hasNext()) {
            linkedHashSet.add(it.next());
        }
        return linkedHashSet;
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> java.util.Set<T> toSet(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        java.util.Set<T> optimizeReadOnlySet;
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        optimizeReadOnlySet = kotlin.collections.SetsKt__SetsKt.optimizeReadOnlySet((java.util.Set) toCollection(sequence, new java.util.LinkedHashSet()));
        return optimizeReadOnlySet;
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<java.util.List<T>> windowed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i, int i2, boolean z) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return kotlin.collections.SlidingWindowKt.windowedSequence(sequence, i, i2, z, false);
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> windowed(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, int i, int i2, boolean z, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function1<? super java.util.List<? extends T>, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return map(kotlin.collections.SlidingWindowKt.windowedSequence(sequence, i, i2, z, true), transform);
    }

    public static /* synthetic */ kotlin.sequences.Sequence windowed$default(kotlin.sequences.Sequence sequence, int i, int i2, boolean z, int i3, java.lang.Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(sequence, i, i2, z);
    }

    public static /* synthetic */ kotlin.sequences.Sequence windowed$default(kotlin.sequences.Sequence sequence, int i, int i2, boolean z, kotlin.jvm.functions.Function1 function1, int i3, java.lang.Object obj) {
        if ((i3 & 2) != 0) {
            i2 = 1;
        }
        if ((i3 & 4) != 0) {
            z = false;
        }
        return windowed(sequence, i, i2, z, function1);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<kotlin.collections.IndexedValue<T>> withIndex(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return new kotlin.sequences.IndexingSequence(sequence);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<kotlin.Pair<T, R>> zip(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends R> other) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        return new kotlin.sequences.MergingSequence(sequence, other, kotlin.sequences.SequencesKt___SequencesKt$zip$1.INSTANCE);
    }

    @org.jetbrains.annotations.NotNull
    public static final <T, R, V> kotlin.sequences.Sequence<V> zip(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends R> other, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super R, ? extends V> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(other, "other");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return new kotlin.sequences.MergingSequence(sequence, other, transform);
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T> kotlin.sequences.Sequence<kotlin.Pair<T, T>> zipWithNext(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        return zipWithNext(sequence, kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1.INSTANCE);
    }

    @kotlin.SinceKotlin(version = "1.2")
    @org.jetbrains.annotations.NotNull
    public static final <T, R> kotlin.sequences.Sequence<R> zipWithNext(@org.jetbrains.annotations.NotNull kotlin.sequences.Sequence<? extends T> sequence, @org.jetbrains.annotations.NotNull kotlin.jvm.functions.Function2<? super T, ? super T, ? extends R> transform) {
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(sequence, "<this>");
        kotlin.jvm.internal.Intrinsics.checkNotNullParameter(transform, "transform");
        return kotlin.sequences.SequencesKt__SequenceBuilderKt.sequence(new kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2(sequence, transform, null));
    }
}
